<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一致性哈希算法</title>
    <url>/2021/11/15/ConsistentHash/</url>
    <content><![CDATA[<img src="https://i.loli.net/2021/11/15/vKFjo15HqAybLmE.png" align="center" width="600" height="400" div>

<span id="more"></span>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>　　一致性哈希算法（Consistent Hashing）最早在论文《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形），整个哈希空间环如下：</p>
<!-- <img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" width = "850" height = "400" div align=right /> -->
<p><img src="https://i.loli.net/2021/11/15/zadkgACX5GNmLow.png" alt="一致性哈希算法1.png"></p>
<p> 整个空间按顺时针方向组织。0和232-1在零点中方向重合。</p>
<p>　　下一步将各个服务器使用Hash进行一个哈希，具体可以选择服务器的ip或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中四台服务器使用ip地址哈希后在环空间的位置如下：<br><img src="https://i.loli.net/2021/11/15/OXgDGroktlSe1J5.png" alt="一致性哈希算法2.png"></p>
<p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p>
<p>　　例如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：<br><img src="https://i.loli.net/2021/11/15/MImWnqQ9EgsrbJf.png" alt="一致性哈希算法3.png"></p>
<p>根据一致性哈希算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p>
<p>下面分析一致性哈希算法的容错性和可扩展性。现假设Node C不幸宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性哈希算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p>
<p>下面考虑另外一种情况，如果在系统中增加一台服务器Node X，如下图所示：<br><img src="https://i.loli.net/2021/11/15/TsgpqS1JDF39wUr.png" alt="一致性哈希算法4.png"></p>
<p>此时对象Object A、B、D不受影响，只有对象C需要重定位到新的Node X 。一般的，在一致性哈希算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</p>
<p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p>
<p>另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，<br><img src="https://i.loli.net/2021/11/15/r1JtzklpaOhj63A.png" alt="一致性哈希算法5.png"></p>
<p>此时必然造成大量数据集中到Node A上，而只有极少量会定位到Node B上。为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点：<br><img src="https://i.loli.net/2021/11/15/vKFjo15HqAybLmE.png" alt="一致性哈希算法6.png"></p>
<p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode102 二叉树的层序遍历</title>
    <url>/2021/11/25/LeetCode102/</url>
    <content><![CDATA[<p>层序遍历（宽度优先遍历）<br>实则将非递归先序遍历中的栈（stack）转化成队列（queue）</p>
<span id="more"></span>

<p>此题方法两种大体结构相同</p>
<h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>核心思想：宽度优先遍历，再循环中设置count，当count = 0时说明当前层已经输出完毕</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    if(root == null)</span><br><span class="line">        return new ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    while(!queue.isEmpty())&#123;</span><br><span class="line">        int count = queue.size();  //输出当前层有几个节点</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        while(count &gt; 0)&#123;                    //判断当前层是否输入完毕</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            if(node.left != null)</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            if(node.right != null)</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            count--;              //poll一次count减1</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>核心思想：宽度优先遍历 + HashMap（记录节点对应层数）及找出最大层数；<br>通过使用宽度优先遍历的方法将整个输出的结果存放在list中<br>通过使用HashMap找到结点所对应的层数并找到最大层数，以方便后续的整体遍历产生List&lt;List<Integer>&gt;</Integer></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	import java.util.*;</span><br><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode node) &#123;</span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">            return  new ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        int max = 0; //存放最大层数以供后续的遍历产生 List&lt;List&lt;Integer&gt;&gt;</span><br><span class="line">        HashMap&lt;TreeNode,Integer&gt; map = new HashMap&lt;&gt;();  //存放每个结点所对应的层数</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;(); </span><br><span class="line">        List&lt;TreeNode&gt; list = new ArrayList&lt;&gt;();  //存放宽度优先遍历的结果</span><br><span class="line">	</span><br><span class="line">        queue.add(node);</span><br><span class="line">        map.put(node,1);  //给头结点初始值为1；</span><br><span class="line">	</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">            </span><br><span class="line">            TreeNode head = queue.poll();</span><br><span class="line">            list.add(head);</span><br><span class="line"></span><br><span class="line">            if(max &lt; map.get(head))&#123;   //进行判断是否是最大值</span><br><span class="line">                max = map.get(head); </span><br><span class="line">            &#125;</span><br><span class="line">            if(head.left != null)&#123;</span><br><span class="line">                queue.add(head.left);</span><br><span class="line">                map.put(head.left,map.get(head)+1);    //每个子节点都是在父节点的基础上 +1</span><br><span class="line">            &#125;</span><br><span class="line">            if(head.right != null)&#123;</span><br><span class="line">                queue.add(head.right);</span><br><span class="line">                map.put(head.right,map.get(head)+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; dbList = new ArrayList&lt;&gt;();</span><br><span class="line">        int flag = map.get(node);</span><br><span class="line">        for(int i = 1; i &lt;= max;i++)&#123;   //循环最大层数次</span><br><span class="line">            List&lt;Integer&gt; num = new ArrayList&lt;&gt;();</span><br><span class="line">            for(TreeNode str : list)&#123;  </span><br><span class="line">								if(i == map.get(str))&#123;   //每个结点层数相同的放在同一个List(num)中    </span><br><span class="line">                    num.add(str.val);</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    continue;    //宽度优先遍历中结点层数是依次排好序的，当出现不同时，后续再就没有相同的值。</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dbList.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return dbList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>布隆过滤器（bloom filter）</title>
    <url>/2021/11/15/BloomFilter/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/11/15/IuhtmyETOKdRpND.png" alt="布隆过滤器.png"></p>
<span id="more"></span>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>直观的说，bloom算法类似一个hash set，用来判断某个元素（key）是否在某个集合中。<br>和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。</p>
<h4 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h4><ol>
<li>首先需要k个hash函数，每个函数可以把key散列成为1个整数</li>
<li>初始化时，需要一个长度为n比特的数组，每个比特位初始化为0</li>
<li>某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位置为1</li>
<li>判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，认为在集合中。</li>
</ol>
<h4 id="优点：不需要存储key，节省空间"><a href="#优点：不需要存储key，节省空间" class="headerlink" title="优点：不需要存储key，节省空间"></a>优点：不需要存储key，节省空间</h4><p>相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数。另外, Hash 函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</p>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol>
<li>算法判断key在集合中时，有一定的概率key其实不在集合中<br>(随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣)</li>
<li>无法删除</li>
</ol>
<h4 id="典型的应用场景："><a href="#典型的应用场景：" class="headerlink" title="典型的应用场景："></a>典型的应用场景：</h4><p>某些存储系统的设计中，会存在空查询缺陷：当查询一个不存在的key时，需要访问慢设备，导致效率低下。<br>比如一个前端页面的缓存系统，可能这样设计：先查询某个页面在本地是否存在，如果存在就直接返回，如果不存在，就从后端获取。但是当频繁从缓存系统查询一个页面时，缓存系统将会频繁请求后端，把压力导入后端。</p>
<p>这是只要增加一个bloom算法的服务，后端插入一个key时，在这个服务中设置一次<br>需要查询后端时，先判断key在后端是否存在，这样就能避免后端的压力。</p>
<p><img src="https://i.loli.net/2021/11/15/IuhtmyETOKdRpND.png" alt="布隆过滤器.png"></p>
<h3 id="False-positives-概率推导"><a href="#False-positives-概率推导" class="headerlink" title="False positives 概率推导"></a>False positives 概率推导</h3><p>假设 Hash 函数以等概率条件选择并设置 Bit Array 中的某一位，m 是该位数组的大小，k 是 Hash 函数的个数，那么位数组中某一特定的位在进行元素插入时的 Hash 操作中没有被置位的概率是：</p>
<p><img src="https://i.loli.net/2021/11/15/YOFbd6WuK1fz9gr.jpg" alt="布隆过滤器1.jpg"></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>基于SSM框架的电⼦书城项⽬开发笔记</title>
    <url>/2022/04/23/SSMknowledge/</url>
    <content><![CDATA[<img src="https://i.loli.net/2021/10/25/lQXn9eE8fIvHCYp.jpg" align="center" width="800" height="250" div>
<span id="more"></span>

<h1 id="电⼦书城项⽬开发笔记"><a href="#电⼦书城项⽬开发笔记" class="headerlink" title="电⼦书城项⽬开发笔记"></a>电⼦书城项⽬开发笔记</h1><h2 id="⼀、项⽬简介"><a href="#⼀、项⽬简介" class="headerlink" title="⼀、项⽬简介"></a>⼀、项⽬简介</h2><p>电⼦书城项⽬的基本实现的要求与技术指标。<br>系统的功能结构：<br>前端部分：<br>⽤户操作<br>⽤户的⼀些基本操作以及相关的购买⾏为的实现<br>图书浏览<br>按类别浏览图书信息、根据图书的名称搜索相关的图书<br>后端部分：<br>商品管理、销售榜单、公告管理、订单管理</p>
<h2 id="⼆、数据库设计"><a href="#⼆、数据库设计" class="headerlink" title="⼆、数据库设计"></a>⼆、数据库设计</h2><p>项⽬中实体E-R图的分析：<br>⽤户实体User E-R图：<br>商品实体products E-R图<br>订单实体orders E-R图<br>订单项orderitem E-R图<br>公告栏实体notice E-R图<br>根据E-R图来创建数据库及相关的表。<br> 创建数据库、数据库名称为xbmubookstore<br>create database if not exists xbmubookstore default charset=utf8mb4;<br> 使⽤use xbmubookstore来使⽤该数据库<br>use xbmubookstore;<br>查看当前数据库中存在的表信息<br>show tables;<br> 创建表格 user表<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> create table if not exists user(</span><br><span class="line"> id int(11) not null auto_increment,</span><br><span class="line"> username varchar(20) not null,</span><br><span class="line"> password varchar(20) not null,</span><br><span class="line"> gender varchar(2),</span><br><span class="line"> email varchar(50),</span><br><span class="line"> telephone varchar(20),</span><br><span class="line"> introduce varchar(100),</span><br><span class="line"> activeCode varchar(50),</span><br><span class="line"> state int(4),</span><br><span class="line"> role varchar(10),</span><br><span class="line"> registTime timestamp,</span><br><span class="line"> primary key (id)</span><br><span class="line">user:</span><br><span class="line">products:</span><br><span class="line">orders:</span><br><span class="line">orderitem:</span><br><span class="line">notice:</span><br></pre></td></tr></table></figure></p>
<h2 id="三、SSM项⽬框架搭建"><a href="#三、SSM项⽬框架搭建" class="headerlink" title="三、SSM项⽬框架搭建"></a>三、SSM项⽬框架搭建</h2><p>使⽤Eclipse创建⼀个Web Project⼯程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">)engine=innodb charset=utf8mb4;</span><br><span class="line">desc user;</span><br><span class="line">create table if not exists notice(</span><br><span class="line"> n_id int(11) not null auto_increment,</span><br><span class="line"> title varchar(10) not null,</span><br><span class="line"> primary key(n_id) );</span><br></pre></td></tr></table></figure>

<p>选择创建Dynamic Web Project项⽬，按向导给项⽬填写名称<br>注意个性 Context root为系统的指定的上下⽂路径<br>项⽬创建完成后的结构组织图如下：<br>接着开始完成SSM的项⽬搭建⼯作</p>
<h3 id="1-导⼊spring及springMVC相关的包"><a href="#1-导⼊spring及springMVC相关的包" class="headerlink" title="1.导⼊spring及springMVC相关的包"></a>1.导⼊spring及springMVC相关的包</h3><p>在spring framework压缩包中的libs⽬录下将以下的jar包，复制到创建的项⽬的webapp–&gt;WEB-INF–lib⽬录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-aop-5.2.19.RELEASE.jar</span><br><span class="line">spring-aspects-5.2.19.RELEASE.jar</span><br><span class="line">spring-beans-5.2.19.RELEASE.jar</span><br><span class="line">spring-context-5.2.19.RELEASE.jar</span><br><span class="line">spring-core-5.2.19.RELEASE.jar</span><br><span class="line">spring-expression-5.2.19.RELEASE.jar</span><br><span class="line">spring-jdbc-5.2.19.RELEASE.jar</span><br><span class="line">spring-tx-5.2.19.RELEASE.jar</span><br><span class="line">spring-web-5.2.19.RELEASE.jar</span><br><span class="line">spring-webmvc-5.2.19.RELEASE.jar</span><br></pre></td></tr></table></figure>

<h3 id="2-导⼊mybatis相关的包"><a href="#2-导⼊mybatis相关的包" class="headerlink" title="2.导⼊mybatis相关的包"></a>2.导⼊mybatis相关的包</h3><p>到mybatis的压缩包中，解压后复制以下jar包到项⽬⼯程的lib⽬录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-3.5.6.jar</span><br><span class="line">log4j-1.2.17.jar</span><br><span class="line">log4j-api-2.13.3.jar</span><br><span class="line">log4j-core-2.13.3.jar</span><br><span class="line">commons-logging-1.2.jar</span><br></pre></td></tr></table></figure>

<h3 id="3-导⼊数据库访问及数据库连接池相关的包"><a href="#3-导⼊数据库访问及数据库连接池相关的包" class="headerlink" title="3.导⼊数据库访问及数据库连接池相关的包"></a>3.导⼊数据库访问及数据库连接池相关的包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commons-pool2-2.11.1.jar</span><br><span class="line">commons-dbcp2-2.9.0.jar</span><br><span class="line">mysql-connector-java-8.0.28.jar</span><br></pre></td></tr></table></figure>


<p>4.导⼊其它的相关的jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aspectjweaver-1.9.6.jar</span><br><span class="line">commons-io-1.3.2.jar</span><br><span class="line">jstl-1.2.jar</span><br><span class="line">javax.servlet-api-3.1.0.jar</span><br><span class="line">mybatis-spring-2.0.7.jar</span><br><span class="line">standard-1.1.2.jar</span><br></pre></td></tr></table></figure>

<h2 id="项⽬搭建后的结构图如下："><a href="#项⽬搭建后的结构图如下：" class="headerlink" title="项⽬搭建后的结构图如下："></a>项⽬搭建后的结构图如下：</h2><p>然后，可以启动服务器，查看创建的初步结构。<br>如果启动的过程顺利，没有错误出现，则可以进⾏⼀下步的配置⼯作。</p>
<h3 id="1-配置SpringMVC的相关内容。"><a href="#1-配置SpringMVC的相关内容。" class="headerlink" title="1.配置SpringMVC的相关内容。"></a>1.配置SpringMVC的相关内容。</h3><p>因为要使⽤SpringMVC的技术来管理web应⽤的请求，所以需要指定替换原来Tomcat中的web应⽤处理请求的<br>Servlet(DefaultServlet)。<br>在项⽬的WEB-INF⽬录下的web.xml中进⾏如下的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line"> id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt;</span><br><span class="line"> &lt;!-- 配置SpringMVC的默认Servlet替换Tomcat的原默认Servlet --&gt;</span><br><span class="line"> &lt;servlet&gt;</span><br><span class="line"> &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line"> &lt;servlet-class&gt;</span><br><span class="line"> org.springframework.web.servlet.DispatcherServlet</span><br><span class="line"> &lt;/servlet-class&gt;</span><br><span class="line"> &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>

<p>配置完成后，启动服务器检查配置的情况。<br>这时会发现，启动过程中出现错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">严重: Servlet[SpringMVC]的Servlet.init（）引发异常</span><br><span class="line">org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML</span><br><span class="line">document from ServletContext resource [/WEB-INF/SpringMVC-servlet.xml]; nested exception is</span><br><span class="line">java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/SpringMVC￾servlet.xml]</span><br><span class="line"> at</span><br><span class="line">org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefini</span><br><span class="line">tionReader.java:342)</span><br></pre></td></tr></table></figure>

<p>这是因为，配置了springmvc的DispatcherServlet后，系统会寻找spring初始化的配置⽂件，默认会到WEB-INF⽬<br>录下寻找以servlet-name为名称前缀，并且后⾯为-servlet.xml的配置⽂件，因为还没有配置该⽂件，所以系统在<br>启动时，初始化spring会报异常。<br>所以要在WEB-INF⽬录下创建⼀个spring初始化配置⽂件：<br>SpringMVC-servlet.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/context</span><br><span class="line"> https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- 启⽤注解 --&gt; </span><br><span class="line"> &lt;context:annotation-config /&gt;</span><br><span class="line"> &lt;!-- 扫描包 --&gt;</span><br><span class="line"> &lt;context:component-scan base-package=&quot;com.lz.xbmu&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>再次启动服务器，检查启动过程的⽇志，会发现没有错误出现。<br>到此基本的配置完成。<br>2.编写第⼀个控制器MyController<br>⾸先，创建包路径: com.lz.xbmu<br>在该包路径下新建包 controller及类MyController</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">//第⼀个控制器</span><br><span class="line">@Controller</span><br><span class="line">public class MyController &#123;</span><br><span class="line"> </span><br><span class="line"> @RequestMapping(&quot;/mytest&quot;)</span><br><span class="line"> public String myTest() &#123;</span><br><span class="line"> System.out.println(&quot;MyController myTest() is running...&quot;);</span><br><span class="line"> return &quot;hello&quot;;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>当通过<a href="http://loclahost:8080/book/mytest">http://loclahost:8080/book/mytest</a><br>请求访问时，系统报异常：<br>如果是循环访问的错误，则需要修改⼀下控制器的返回字符串。<br>修改完循环引⽤访问的问题后，再启动访问发现404错误。<br>这是因为没有配置视图解析器造成的，所以要配置视图解析器，可以参考帮助⽂档中的内容（web.pdf）。<br>如果提示404未找到WEB-INF/jsp⽬录下的hello.jsp⽂件，说明还没有创建该⽂件。<br>创建hello.jsp⽂件，再启动服务器。<br>2.通过springmvc请求数据发送<br>服务器启动后，访问地址<a href="http://localhost:8080/book/%E6%97%B6%EF%BC%8C%E4%BC%9A%E9%BB%98%E8%AE%A4%E8%AE%BF%E9%97%AE%E5%88%B0webapp%E2%BD%AC%E5%BD%95%E4%B8%8B%E7%9A%84index.jsp%E2%BB%9A%E2%BE%AF%EF%BC%8C%E5%BD%93%E8%AE%BF%E9%97%AE">http://localhost:8080/book/时，会默认访问到webapp⽬录下的index.jsp⻚⾯，当访问</a><br>到该⻚⾯时，其中的的jsp动作，forward会跳转访问到/mytest，也就是请求了MyControll中的相对应的⽅法，该<br>⽅法的返回字符串就是跳转后的⻚⾯的名称。<br>也就是WEB-INF/jsp/hello.jsp⻚⾯。<br>@PostMapping注解的使⽤<br>ModelAndView对象的使⽤<br>通过pojo对象来包装数据<br>中⽂乱码的解决，使⽤全局过滤器来解决。<br>3.部署client前端的资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置视图解析器 --&gt;</span><br><span class="line"> &lt;bean id=&quot;viewResolver&quot;</span><br><span class="line"> class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line"> &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line"> &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line"> &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line"> &lt;init-param&gt;</span><br><span class="line"> &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line"> &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line"> &lt;/init-param&gt; </span><br><span class="line"> &lt;/filter&gt;</span><br><span class="line"> &lt;filter-mapping&gt;</span><br><span class="line"> &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>在该⽂件夹中存在这资源内容和相关的jsp⻚⾯。<br>将资源⽂件内容与jsp⻚⾯分别进⾏部署。<br>⾸先在webapp⽬录下创建⼀个名为client的⽬录，然后将ad，bookcover，css，images，js这五个⽬录及其中的<br>内容均考⻉到client⽬录中。<br>在WEB-INF/jsp⽬录下再创建⼀个名为client的⽬录，然后将剩余的jsp⽂件都考⻉到该⽬录下。<br>个性MyController类中的mytest请求访问⽅法的返回字符串路径：<br>四、项⽬的前端模块应⽤<br>1.部署相关的资源<br>将资源分为两个部分，⻚⾯jsp都放到webapp–&gt;WEB-INF–&gt;jsp–&gt;⽬录内，可以提⾼安全性。只能通过SpringMVC<br>的视图解析器才能访问到。<br>其它的⻚⾯内的样式表、js、图⽚等内容都放到webapp–&gt;client⽬录下，这些内容是可以通过浏览器直接访问到。<br>⻚⾯中的资源⽆法访问的原因：是因为在web.xml中配置了DispatcherServlet来处理全部的映射请求的路径，⽽该<br>servlet是SpringMVC中的前端控制器，只负责处理url映射请求对应的处理器，⽽⽆法处理静态资源，所以⻚⾯中<br>的静态资源是不能被调⽤。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/mytest&quot;)</span><br><span class="line">public String myTest() &#123;</span><br><span class="line">System.out.println(&quot;跳转到书城的⾸⻚⾯&quot;);</span><br><span class="line">//return &quot;hello&quot;;</span><br><span class="line">return &quot;client/index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.处理静态资源的⽅法<br>a.使⽤Tomcat的默认处理Servlet（defaultServlet）<br>2.将DispatcherServlet的处理url映射请求进⾏设定<br>3.使⽤SpringMVC的配置⽅式<br>将静态资源的处理过程添加到SpringMVC-servlet.xml⽂件中去<br>3.⽤户注册功能<br>要通过注册⻚⾯来实现⽤户的注册功能。<br>因为现在的jsp⻚⾯都在WEB-INF⽬录下，所以不能直接访问到。<br>通过SpringMVC视图解析器来反回⼀个注册⻚⾯。<br>⾸先分析client/index.jsp⻚⾯的组成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line"> &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line"> &lt;servlet-class&gt;</span><br><span class="line"> org.springframework.web.servlet.DispatcherServlet</span><br><span class="line"> &lt;/servlet-class&gt;</span><br><span class="line"> &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;!-- 静态资源解析 --&gt;</span><br><span class="line"> &lt;mvc:annotation-driven/&gt;</span><br><span class="line"> &lt;mvc:resources location=&quot;client/css/&quot; mapping=&quot;client/css/**&quot;&gt;&lt;/mvc:resources&gt;</span><br><span class="line"> &lt;mvc:resources location=&quot;client/ad/&quot; mapping=&quot;client/ad/**&quot;&gt;&lt;/mvc:resources&gt;</span><br><span class="line"> &lt;mvc:resources location=&quot;client/bookcover/&quot; mapping=&quot;client/bookcover/**&quot;&gt;&lt;/mvc:resources&gt;</span><br><span class="line"> &lt;mvc:resources location=&quot;client/js/&quot; mapping=&quot;client/js/**&quot;&gt;&lt;/mvc:resources&gt;</span><br><span class="line"> &lt;mvc:resources location=&quot;client/images/&quot; mapping=&quot;client/images/**&quot;&gt;&lt;/mvc:resources&gt;</span><br></pre></td></tr></table></figure>

<p>需要在对应的⻚⾯中去设置相关的链接或是请求的url<br>在head.jsp⻚⾯中添加以下的内容<br><a href="${pageContext.request.contextPath}/registerpage">新⽤户注册</a><br>这样就可以通过请求UserController中的对应的处理器⽅法来返回指定的jsp⻚⾯。<br>通过form表单提交注册⽤户的信息<br>UserController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"> //跳转到⽤户注册⻚⾯</span><br><span class="line"> @RequestMapping(value=&quot;/registerpage&quot;,method=RequestMethod.GET)</span><br><span class="line"> public String registerPage() &#123;</span><br><span class="line"> System.out.println(&quot;跳转到⽤户注册⻚⾯...&quot;);</span><br><span class="line"> return &quot;client/register&quot;;</span><br></pre></td></tr></table></figure>

<p>4.整合spring与mybatis<br>⾸先将相关的spring包及mybatis的包导⼊到项⽬中去。<br>然后是相关的数据库驱动、数据库连接、⽇志等相关的包也要导⼊到项⽬中去。<br>然后就要在项⽬添加整合的配置⽂件。<br>因为spring和springMVC都是springframework框架中的内容，所以它们之间不需要进⾏整合的配置，只是要对<br>spring与mybatis及springmvc与mybatis进⾏整合。<br>配置⽂件参考spring与mybatis整合的章节内容。<br>使⽤三层结构来完成项⽬的功能模块。<br>⾸先创建com.lz.xbmu.mapper包，在该包中创建接⼝及对应的映射⽂件。<br> }<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  //获取⽤户注册信息</span><br><span class="line"> @RequestMapping(value=&quot;/registeruser&quot;,method=RequestMethod.POST)</span><br><span class="line"> public String registerInfo(User user) &#123;</span><br><span class="line"> System.out.println(user);</span><br><span class="line"> //注册后的⽤户数据将要写⼊数据库中</span><br><span class="line"> </span><br><span class="line"> return &quot;client/registersuccess&quot;;</span><br><span class="line"> &#125; &#125;</span><br><span class="line">package com.lz.xbmu.mapper;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"> public int insertUser(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.mapper.UserMapper&quot;&gt;</span><br><span class="line"> &lt;!-- 插⼊⽤户数据 --&gt;</span><br><span class="line"> &lt;insert id=&quot;insertUser&quot; parameterType=&quot;user&quot;&gt;</span><br><span class="line"> insert into user</span><br><span class="line"> value(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;telephone&#125;,#&#123;introduce&#125;,#</span><br><span class="line">&#123;activeCode&#125;,#&#123;state&#125;,#&#123;role&#125;,#&#123;registTime&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>接着创建⽤户接⼝及实现类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.service;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public interface UserService &#123;</span><br><span class="line"> public int addUser(User user);</span><br><span class="line">&#125;</span><br><span class="line">package com.lz.xbmu.service.impl;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import com.lz.xbmu.mapper.UserMapper;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">import com.lz.xbmu.service.UserService;</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"> </span><br><span class="line"> @Autowired</span><br><span class="line"> private UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line"> @Override</span><br><span class="line"> public int addUser(User user) &#123;</span><br><span class="line"> // 添加业务⽅法</span><br><span class="line"> //activeCode 激活码</span><br><span class="line"> //user.setActiveCode(UUID.randomUUID().toString());</span><br></pre></td></tr></table></figure>

<p>记得要检查所有的配置信息，否则会出现意外的错误。⽐如数据库名称，地址等配置信息的错误。<br>现在已经完成了将前端的数据获取到，并通过业务⽅法再将数据使⽤持久化的机制保存到了指定的数据库。现在就<br>完成了SSM框架的整合⼯作。<br>五、后端业务处理及数据维护<br>1.⽤户登录实现<br>在系统的前端没有设计专⻔的⽤户登录连接，⽽是通过⼏种⽅式跳转到登录⻚⾯。<br>当⽤户访问我的帐户时，因为要判断⽤户是否是登录状态，如是已经登录的状态，则跳转到我的帐户⻚⾯。不是登<br>录状态时则要跳转到登录⻚⾯完成登录后才能访问我的帐户⻚⾯。<br>如何检查⽤户是否是登录状态？<br>在登录⻚⾯中填写⽤户的登录信息，在后端检查⽤户的信息，并且进⾏登录业务处理。<br>我的帐户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//state状态码 0末激活，1已激活</span><br><span class="line"> user.setState(1);</span><br><span class="line"> //role 普通⽤户，管理员</span><br><span class="line"> user.setRole(&quot;普通⽤户&quot;);</span><br><span class="line"> //注册时间</span><br><span class="line"> user.setRegistTime(new Date());</span><br><span class="line"> return this.userMapper.insertUser(user);</span><br><span class="line"> &#125; &#125;</span><br><span class="line"> //⽤户帐户⻚⾯跳转</span><br><span class="line"> @GetMapping(&quot;/myaccount&quot;)</span><br><span class="line"> public ModelAndView myAccount(HttpSession session, ModelAndView mav) &#123;</span><br><span class="line"> //因为在登录是会将⽤户信息存储到session中</span><br><span class="line"> User user = (User) session.getAttribute(&quot;user&quot;);</span><br><span class="line"> if (user != null) &#123;</span><br><span class="line"> mav.setViewName(&quot;client/myAccount&quot;);</span><br><span class="line"> &#125;else &#123;</span><br><span class="line"> mav.addObject(&quot;info&quot;,&quot;请先登录&quot;);</span><br><span class="line"> mav.setViewName(&quot;client/login&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> return mav;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sql id=&quot;userColumns&quot;&gt;</span><br><span class="line">id,username,gender,email,telephone,introduce,activeCode,state,role,registTime</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;!-- 根据⽤户名及密码检查⽤户 --&gt;</span><br><span class="line">&lt;select id=&quot;selectUserByNameAndPass&quot; parameterType=&quot;Map&quot;</span><br><span class="line">resultType=&quot;user&quot;&gt;</span><br><span class="line">select &lt;include refid=&quot;userColumns&quot; /&gt;</span><br><span class="line">from user</span><br><span class="line">where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.mapper;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"> public int insertUser(User user);</span><br><span class="line"> public User selectUserByNameAndPass(Map&lt;String,String&gt; map);</span><br><span class="line">&#125;</span><br><span class="line"> @Override</span><br><span class="line"> public User findUserByNameAndPass(String name, String pass) &#123;</span><br><span class="line"> // TODO Auto-generated method stub</span><br><span class="line"> Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"> map.put(&quot;username&quot;, name);</span><br><span class="line"> map.put(&quot;password&quot;, pass);</span><br><span class="line"> return userMapper.selectUserByNameAndPass(map);</span><br><span class="line"> &#125;</span><br><span class="line"> //⽤户登录</span><br><span class="line"> @PostMapping(&quot;/userlogin&quot;)</span><br><span class="line"> public ModelAndView userLogin(String username,String password,</span><br><span class="line"> HttpSession session, ModelAndView mav) &#123;</span><br><span class="line"> System.out.println(&quot;username=&quot;+username+&quot;,password=&quot;+password);</span><br><span class="line"> //通过⽤户名与密码到数据库中检查是否是注册⽤户</span><br><span class="line"> User user = userService.findUserByNameAndPass(username, password);</span><br><span class="line"> System.out.println(user);</span><br><span class="line"> boolean flag = true;</span><br><span class="line"> if(user != null) &#123;</span><br><span class="line"> //if(user.getActiveCode() == null) flag = false;</span><br><span class="line"> if(user.getState() != 1) flag = false;</span><br><span class="line"> if(user.getRegistTime() == null) flag = false;</span><br><span class="line"> if(flag) &#123;</span><br><span class="line"> session.setAttribute(&quot;user&quot;, user);</span><br><span class="line"> if(&quot;普通⽤户&quot;.equalsIgnoreCase(user.getRole()))&#123;</span><br><span class="line"> mav.setViewName(&quot;client/index&quot;);</span><br><span class="line"> &#125;else &#123;</span><br><span class="line"> mav.setViewName(&quot;admin/manager&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;else &#123;</span><br><span class="line"> mav.addObject(&quot;info&quot;,&quot;登录失败&quot;);</span><br><span class="line"> mav.setViewName(&quot;client/login&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;else &#123;</span><br><span class="line"> mav.addObject(&quot;info&quot;,&quot;⽤户名或密码错误&quot;);</span><br><span class="line"> mav.setViewName(&quot;client/login&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> return mav;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//⽤户退出系统</span><br><span class="line">@GetMapping(&quot;/logout&quot;)</span><br><span class="line">public String userLogout(HttpSession session) &#123;</span><br><span class="line">System.out.println(&quot;⽤户退出系统&quot;);</span><br><span class="line">session.setAttribute(&quot;user&quot;, null);</span><br><span class="line">session.setAttribute(&quot;info&quot;, null);</span><br><span class="line">session.invalidate();</span><br><span class="line">return &quot;redirect:mytest&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>PythonNote</title>
    <url>/2021/10/25/PythonNote/</url>
    <content><![CDATA[<img src="https://i.loli.net/2021/10/25/lQXn9eE8fIvHCYp.jpg" align="center" width="800" height="250" div>
<span id="more"></span>

<h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第一章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第一章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第一章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第一章</h2><p>注：运行文件末尾的.py指这是一个python程序-&gt;python解释器读取 </p>
<h3 id="·变量"><a href="#·变量" class="headerlink" title="·变量"></a>·变量</h3><p>在程序中可随时修改变量的值，而python将始终记录变量的最新值。 </p>
<h4 id="··有关变量的规则"><a href="#··有关变量的规则" class="headerlink" title="··有关变量的规则"></a>··有关变量的规则</h4><p>·变量名只能包含字母、数字和下划线。变量可以字母和下划线开头，但是不能以数字开头 </p>
<p>·变量名不能包含空格，但可使用下划线来分隔其中的单词。 </p>
<p>·不要将python关键字和函数名作变量名，即不要使用python保留用于特殊用途的单词 </p>
<p>·变量名应该简短又具有描述性。 </p>
<p>·慎用小写字母l和大写字母o，因为他们可能被人错看成数字1和0. </p>
<h4 id="··当输入程序有误时，解释器就会报错。"><a href="#··当输入程序有误时，解释器就会报错。" class="headerlink" title="··当输入程序有误时，解释器就会报错。"></a>··当输入程序有误时，解释器就会报错。</h4><h3 id="·字符串"><a href="#·字符串" class="headerlink" title="·字符串"></a>·字符串</h3><p>字符串就是一系列字符，用引号括（单引号和双引号）起来的都是字符串。 </p>
<h4 id="··修改字符的大小写"><a href="#··修改字符的大小写" class="headerlink" title="··修改字符的大小写"></a>··修改字符的大小写</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=&quot;ada lovelace&quot;</span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure>
<p> 输出Ada Lovelace </p>
<p>方法是Python可对数据执行的操作。 </p>
<p>在name.title()中，name后 面的句点（.）让Python对变量name执    行方法title()指定的操作。每个方法后面都跟着一对括号， 这是因为方法通常需要额外的信息来完成其工作。这种信息是在括号内提供的。函数title()不 需要额外的信息，因此它后面的括号是空的。  </p>
<p>title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。Upper()将字符串转换成大写；lower()将字符串转换成小写； </p>
<h4 id="··合并字符串"><a href="#··合并字符串" class="headerlink" title="··合并字符串"></a>··合并字符串</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">first_name = &quot;ada&quot;</span><br><span class="line">last_name = &quot;lovelace&quot;</span><br><span class="line">full_name = first_name + &quot; &quot; + last_name</span><br><span class="line">print(full_name) </span><br></pre></td></tr></table></figure>

<p>Python使用加号（+）来合并字符串。在这个示例中，我们使用+来合并first_name、空格和 last_name，以得到完整的姓名 </p>
<h4 id="··使用制表符或换行符来添加空白"><a href="#··使用制表符或换行符来添加空白" class="headerlink" title="··使用制表符或换行符来添加空白"></a>··使用制表符或换行符来添加空白</h4><p>/t-&gt;tab制表符；/n-&gt;换行 </p>
<h4 id="··删除空白"><a href="#··删除空白" class="headerlink" title="··删除空白"></a>··删除空白</h4><p>rstrip()-&gt;确保字符串末尾没有空白（暂时性的删除）；要永久删除这个字符串中的空白，必须将删除操作的结果存回到变量中 </p>
<p>Lstrip()-&gt;确保字符串的开头没有空白 </p>
<p>strip()-&gt;确保字符串开头和结束都没有空白 </p>
<h4 id="··使用字符串时避免语法错误"><a href="#··使用字符串时避免语法错误" class="headerlink" title="··使用字符串时避免语法错误"></a>··使用字符串时避免语法错误</h4><p>种语法错误表明，在解释器看 来，其中的有些内容不是有效的Python代码。（有撇号使用双引号） </p>
<h4 id="··python-2中的print语句-print-“Hello-Python-2-7-world-”"><a href="#··python-2中的print语句-print-“Hello-Python-2-7-world-”" class="headerlink" title="··python 2中的print语句 print “Hello Python 2.7 world!”"></a>··python 2中的print语句 print “Hello Python 2.7 world!”</h4><h3 id="·数字"><a href="#·数字" class="headerlink" title="·数字"></a>·数字</h3><h4 id="··整数"><a href="#··整数" class="headerlink" title="··整数"></a>··整数</h4><p>python支持运算次序；，空格不影响Python计算表达式的方式；python使用两个乘号表示乘方运算； </p>
<p>如3<strong>2=9、10</strong>6=1000000； </p>
<h4 id="··浮点数"><a href="#··浮点数" class="headerlink" title="··浮点数"></a>··浮点数</h4><p>python将带小数点的数字都称浮点数。加减乘除都适用，但需要注意的是，结果包含的小数位数可能是不确定的。如0.2+0.1=0.3000000000000000004；暂时忽略 多余的小数位数即可； </p>
<h4 id="··使用函数str-避免类型错误"><a href="#··使用函数str-避免类型错误" class="headerlink" title="··使用函数str()避免类型错误"></a>··使用函数str()避免类型错误</h4><p>str()-&gt;将非字符串值表示字符串如age=23      message = “Happy” + str(age)+”rd Birthday!” </p>
<h4 id="··python-2-中的整数"><a href="#··python-2-中的整数" class="headerlink" title="··python 2 中的整数"></a>··python 2 中的整数</h4><p>3/2=1;整数除法的结果只包含整数部分，小数部 分被删除。请注意，计算整数结果时，采取的方式不是四舍五入，而是将小数部分直接删除;3.0/2=1.5    3/2.0=1.5     3.0/2.0=1.5; </p>
<h3 id="·注释"><a href="#·注释" class="headerlink" title="·注释"></a>·注释</h3><h4 id="··如何编写注释"><a href="#··如何编写注释" class="headerlink" title="··如何编写注释"></a>··如何编写注释</h4><p>在Python中，注释用井号（#）标识。井号后面的内容都会被Python解释器忽略 </p>
<h4 id="··该编写什么样的注释"><a href="#··该编写什么样的注释" class="headerlink" title="··该编写什么样的注释"></a>··该编写什么样的注释</h4><p>编写注释的主要目的是阐述代码要做什么，以及是如何做的。 </p>
<h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第二章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第二章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第二章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第二章</h2><h3 id="·列表是什么"><a href="#·列表是什么" class="headerlink" title="·列表是什么"></a>·列表是什么</h3><p>列表有一系列按特定顺序排列的元素组成。 </p>
<h4 id="··访问列表元素"><a href="#··访问列表元素" class="headerlink" title="··访问列表元素"></a>··访问列表元素</h4><p>只需将元素的位置或索引告诉python如bicycles = [‘trek’, ‘cannondale’, ‘redline’, ‘specialized’] print(bicycles[0]) 输出 Trek </p>
<h4 id="··索引从0而不是1开始"><a href="#··索引从0而不是1开始" class="headerlink" title="··索引从0而不是1开始"></a>··索引从0而不是1开始</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bicycles = [&#x27;trek&#x27;, &#x27;6给&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;]</span><br><span class="line">print(bicycles[1]print(bicycles[3]) </span><br></pre></td></tr></table></figure>
<p>输出cannondale  specialized//</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(bicycles[-1])</span><br></pre></td></tr></table></figure>
<p>输出specycles </p>
<p>索引-2返回倒数第二个列表元素， 索引-3返回倒数第三个列表元素，以此类推； </p>
<h4 id="··使用列表中的各个值"><a href="#··使用列表中的各个值" class="headerlink" title="··使用列表中的各个值"></a>··使用列表中的各个值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bicycles = [&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;]</span><br><span class="line">message = &quot;My first bicycle was a &quot; + bicycles[0].title() + &quot;.”</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>
<p> 输出My first bicycle was a Trek.  </p>
<h3 id="·修改、添加和删除元素"><a href="#·修改、添加和删除元素" class="headerlink" title="·修改、添加和删除元素"></a>·修改、添加和删除元素</h3><h4 id="··修改列表元素"><a href="#··修改列表元素" class="headerlink" title="··修改列表元素"></a>··修改列表元素</h4><p>要修改列表元素，可指定列表名和要修改 的元素的索引，再指定该元素的新值 </p>
<h4 id="··在列表中添加元素"><a href="#··在列表中添加元素" class="headerlink" title="··在列表中添加元素"></a>··在列表中添加元素</h4><p>append()-&gt;在列表末尾添加元素;(动态的添加列表)：motorcycles.append(‘ducati’)  </p>
<p>Insret()-&gt;在列表中添加元素；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">motorcycles.insert(0, &#x27;ducati&#x27;) </span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>
<p>输出[‘ducati’, ‘honda’, ‘yamaha’, ‘suzuki’]  </p>
<h4 id="··从列表中删除元素"><a href="#··从列表中删除元素" class="headerlink" title="··从列表中删除元素"></a>··从列表中删除元素</h4><p>·使用del语句删除元素；del motorcycles[0] </p>
<p>·pop()-&gt;删除元素 （可删除列表末尾的元素，并让你能够接着使用它）pop(-1)==pop() </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">print(motorcycles)</span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line">print(motorcycles)</span><br><span class="line">print(popped_motorcycle)</span><br></pre></td></tr></table></figure>
<p>输出[‘honda’, ‘yamaha’, ‘suzuki’] [‘honda’, ‘yamaha’] suzuki  </p>
<p>判断标准：如果你要从列表 中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续 使用它，就使用方法pop()。 </p>
<p>·remove()-&gt;你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值;motorcycles.remove(‘ducati’) 注意: 方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要z使用循环来判断是否删除了所有这样的值 </p>
<h3 id="·组织列表"><a href="#·组织列表" class="headerlink" title="·组织列表"></a>·组织列表</h3><h4 id="··sort（）-gt-对数列永久性排序-cars-sort"><a href="#··sort（）-gt-对数列永久性排序-cars-sort" class="headerlink" title="··sort（）-&gt;对数列永久性排序;cars.sort()"></a>··sort（）-&gt;对数列永久性排序;cars.sort()</h4><p>.sort(reverse=True)-&gt;以按与字母顺序相反的顺序排列列表元素;cars.sort(reverse=True) </p>
<h4 id="··sorted-gt-对列表进行临时排序；sorted-cars"><a href="#··sorted-gt-对列表进行临时排序；sorted-cars" class="headerlink" title="··sorted()-&gt;对列表进行临时排序；sorted(cars)"></a>··sorted()-&gt;对列表进行临时排序；sorted(cars)</h4><p>sorted(XXXXX,reverse=True)-&gt;按与字母顺 序相反的顺序显示列表 </p>
<h4 id="··倒这打印列表"><a href="#··倒这打印列表" class="headerlink" title="··倒这打印列表"></a>··倒这打印列表</h4><p>reverse()-&gt;反转列表元素的排列顺序;cars.reverse()  </p>
<p>注意，reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排 列顺序 </p>
<h4 id="··len-gt-确定列表长度；len-cars"><a href="#··len-gt-确定列表长度；len-cars" class="headerlink" title="··len()-&gt; 确定列表长度；len(cars)"></a>··len()-&gt; 确定列表长度；len(cars)</h4><h4 id="··使用列表时避免索引错误"><a href="#··使用列表时避免索引错误" class="headerlink" title="··使用列表时避免索引错误"></a>··使用列表时避免索引错误</h4><p>Python无法理解你指定的索引 </p>
<h3 id="·索引-1：访问列表最后一个元素"><a href="#·索引-1：访问列表最后一个元素" class="headerlink" title="·索引-1：访问列表最后一个元素"></a>·索引-1：访问列表最后一个元素</h3><h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第三章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第三章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第三章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; 第三章</h2><h3 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h3><p>使用for循环    for AAA in BBB  //将BBB复制给AAA； </p>
<h4 id="深入地研究循环"><a href="#深入地研究循环" class="headerlink" title="深入地研究循环"></a>深入地研究循环</h4><h4 id="在for循环中执行更多的操作"><a href="#在for循环中执行更多的操作" class="headerlink" title="在for循环中执行更多的操作"></a>在for循环中执行更多的操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for magician in magicians:      </span><br><span class="line"></span><br><span class="line">	print(magician.title() + &quot;, that was a great trick!&quot;)  </span><br><span class="line"></span><br><span class="line">print(&quot;I can&#x27;t wait to see your next trick, &quot; + magician.title() + &quot;.\n&quot;)</span><br></pre></td></tr></table></figure>

<p>for语句中后面语句执行缩进的语句； </p>
<h4 id="在for循环结束后执行一些操作"><a href="#在for循环结束后执行一些操作" class="headerlink" title="在for循环结束后执行一些操作"></a>在for循环结束后执行一些操作</h4><p>没有缩进的代码都只执行一次，而不会重复执行 </p>
<h3 id="避免缩进错误"><a href="#避免缩进错误" class="headerlink" title="避免缩进错误"></a>避免缩进错误</h3><h4 id="忘记缩进"><a href="#忘记缩进" class="headerlink" title="忘记缩进"></a>忘记缩进</h4><h4 id="忘记缩进额外的代码行"><a href="#忘记缩进额外的代码行" class="headerlink" title="忘记缩进额外的代码行"></a>忘记缩进额外的代码行</h4><h4 id="不必要的缩进"><a href="#不必要的缩进" class="headerlink" title="不必要的缩进"></a>不必要的缩进</h4><h4 id="循环后不必要的缩进"><a href="#循环后不必要的缩进" class="headerlink" title="循环后不必要的缩进"></a>循环后不必要的缩进</h4><h4 id="遗漏了冒号（语法错误）"><a href="#遗漏了冒号（语法错误）" class="headerlink" title="遗漏了冒号（语法错误）"></a>遗漏了冒号（语法错误）</h4><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><h4 id="range-gt-生成一系列的数字"><a href="#range-gt-生成一系列的数字" class="headerlink" title="range()-&gt;生成一系列的数字;"></a>range()-&gt;生成一系列的数字;</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">     print(value) </span><br></pre></td></tr></table></figure>
<p> 输出： 1 2 3 4<br>//第一个值开始，第二个值前一个结束；即此例不输出5 </p>
<h4 id="使用range-创建数字列表"><a href="#使用range-创建数字列表" class="headerlink" title="使用range() 创建数字列表"></a>使用range() 创建数字列表</h4><p>list()-&gt;将数字转换为列表； </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numbers = list(range(1,6))</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>
<h4 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h4><p>min()-&gt;数字列表中的最小值； </p>
<p>max()-&gt;数值列表中的最大值； </p>
<p>sum()-&gt;数值列表中的和； </p>
<h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line">for value in range(1,11):</span><br><span class="line">    square = value**2</span><br><span class="line">    squares.append(square)</span><br><span class="line">    print(squares)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">squares = [value**2 for value in range(1,11)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure>

<p>两个输出语句相同结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure>
<h3 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h3><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">players = [&#x27;charles&#x27;, &#x27;martina&#x27;, &#x27;michael&#x27;, &#x27;florence&#x27;, &#x27;eli&#x27;]</span><br><span class="line">print(players[0:3]) </span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;charles&#x27;, &#x27;martina&#x27;, &#x27;michael&#x27;] </span><br></pre></td></tr></table></figure>
<p>[0:3]-&gt;[:3] </p>
<p>[2:]-&gt;从2开始到最后一个 </p>
<p>[-3:]-&gt;从倒数第三个开始到最后一个 </p>
<h4 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">players = [&#x27;charles&#x27;, &#x27;martina&#x27;, &#x27;michael&#x27;, &#x27;florence&#x27;, &#x27;eli&#x27;]</span><br><span class="line">for player in players[:3]:</span><br><span class="line">	print(player.title())</span><br></pre></td></tr></table></figure>
<p> 输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Charles Martina Michael</span><br></pre></td></tr></table></figure>

<h4 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h4><p> friend_foods = my_foods[:]//之后改变friend_foods改变时my_foods不会改变  </p>
<p>不能friend_foods = my_foods//改变一个其他的一个也会改变 </p>
<h3 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h3><h4 id="定义元祖"><a href="#定义元祖" class="headerlink" title="定义元祖"></a>定义元祖</h4><p>元祖犹如列表，但使用圆括号，列表是可以改变的但元祖不可以改变dimensions = (200, 50) </p>
<h4 id="修改元素变量"><a href="#修改元素变量" class="headerlink" title="修改元素变量"></a>修改元素变量</h4><p>不能修改元组的元素，但可以给存储元组的变量赋值，重新赋值 </p>
<h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第四章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第四章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第四章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第四章</h2><h3 id="一个简单示例"><a href="#一个简单示例" class="headerlink" title="一个简单示例"></a>一个简单示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cars = [&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]  </span><br><span class="line">for car in cars:</span><br><span class="line">    if car == &#x27;bmw&#x27;:</span><br><span class="line">    	print(car.upper())</span><br><span class="line">    else:        </span><br><span class="line">    	print(car.title())  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测 </p>
<h4 id="检测是否相等"><a href="#检测是否相等" class="headerlink" title="检测是否相等"></a>检测是否相等</h4><p>==-&gt;判断左右是否相等（字符的大小也会影响） </p>
<h4 id="检测是否不相等"><a href="#检测是否不相等" class="headerlink" title="检测是否不相等"></a>检测是否不相等</h4><p>！=-&gt;判断左右是否不相等 </p>
<h4 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h4><p>==      !=      &lt;      &lt;=       &gt;       &gt;= </p>
<h4 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h4><p>and  -&gt;  相当于  &amp;&amp; </p>
<p>or  -&gt;  相当于 ||（当左边为真时在不经过右边） </p>
<h4 id="检测特定值是否包含在列表中"><a href="#检测特定值是否包含在列表中" class="headerlink" title="检测特定值是否包含在列表中"></a>检测特定值是否包含在列表中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; requested_toppings = [&#x27;mushrooms&#x27;, &#x27;onions&#x27;, &#x27;pineapple&#x27;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#x27;mushrooms&#x27; in requested_toppings </span><br><span class="line"></span><br><span class="line">输出： True </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#x27;pepperoni&#x27; in requested_toppings </span><br><span class="line"></span><br><span class="line">输出： False </span><br></pre></td></tr></table></figure>


<h4 id="检测特定值是否不包含在列表中"><a href="#检测特定值是否不包含在列表中" class="headerlink" title="检测特定值是否不包含在列表中"></a>检测特定值是否不包含在列表中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">banned_users = [&#x27;andrew&#x27;, &#x27;carolina&#x27;, &#x27;david&#x27;]  </span><br><span class="line">user = &#x27;marie&#x27;   </span><br><span class="line">if user not in banned_users:</span><br><span class="line">	print(user.title() + &quot;, you can post a response if you wish.&quot;)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Marie, you can post a response if you wish.  </span><br></pre></td></tr></table></figure>

<h4 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h4><p>条件测试的别名。与条 件表达式一样，布尔表达式的结果要么为True，要么为False </p>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h4 id="简单的if语句"><a href="#简单的if语句" class="headerlink" title="简单的if语句"></a>简单的if语句</h4><p>if age &gt;= 18:  </p>
<h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><h4 id="if-elif-else语句-gt-C语言if-else-if-else语句"><a href="#if-elif-else语句-gt-C语言if-else-if-else语句" class="headerlink" title="if-elif-else语句-&gt;C语言if-else if - else语句"></a>if-elif-else语句-&gt;C语言if-else if - else语句</h4><h3 id="使用if语句处理列表"><a href="#使用if语句处理列表" class="headerlink" title="使用if语句处理列表"></a>使用if语句处理列表</h3><h4 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requested_toppings = [&#x27;mushrooms&#x27;, &#x27;green peppers&#x27;, &#x27;extra cheese&#x27;]  </span><br><span class="line"></span><br><span class="line">for requested_topping in requested_toppings:  </span><br><span class="line"></span><br><span class="line">	if requested_topping == &#x27;green peppers&#x27;:     //检测此列表中是否出现green peppers    </span><br><span class="line"></span><br><span class="line"> 		print(&quot;Sorry, we are out of green peppers right now.&quot;)     </span><br><span class="line"></span><br><span class="line">	else:      </span><br><span class="line"></span><br><span class="line">    	print(&quot;Adding &quot; + requested_topping + &quot;.&quot;)  </span><br></pre></td></tr></table></figure>

<h4 id="确定列表不是空的"><a href="#确定列表不是空的" class="headerlink" title="确定列表不是空的"></a>确定列表不是空的</h4><p>i=[]   if  i://判断i是不是空列表 </p>
<h4 id="使用多个列表"><a href="#使用多个列表" class="headerlink" title="使用多个列表"></a>使用多个列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for requested_topping in requested_toppings:</span><br><span class="line">	if requested_topping in available_toppings: //两列表进行查找时，只需循环一个即可；</span><br></pre></td></tr></table></figure>
<h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第五章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第五章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第五章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第五章</h2><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p> alien_0 = {‘color’: ‘green’, ‘points’: 5} //使用大括号 </p>
<h4 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(alien_0[&#x27;color&#x27;])</span><br><span class="line">print(alien_0[&#x27;points&#x27;]</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">green 5 </span><br></pre></td></tr></table></figure>
<p>str()-&gt; 函数将对象转化为适于人阅读的形式 </p>
<h4 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h4><p> alien_0[‘y_position’] = 25 —-‘[y_position’:25] </p>
<h4 id="先创建一个空字典-alien-0"><a href="#先创建一个空字典-alien-0" class="headerlink" title="先创建一个空字典    alien_0 = {}"></a>先创建一个空字典    alien_0 = {}</h4><h4 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h4><p> 次指定字典名、用方括号括起的键以及与该键相关联的新值，类似重新添加键-值对 </p>
<h4 id="删除键—值对-del-alien-0-‘points’"><a href="#删除键—值对-del-alien-0-‘points’" class="headerlink" title="删除键—值对     del alien_0[‘points’]"></a>删除键—值对     del alien_0[‘points’]</h4><h4 id="由类似对象组成的字典"><a href="#由类似对象组成的字典" class="headerlink" title="由类似对象组成的字典"></a>由类似对象组成的字典</h4><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><h4 id="遍历所有的键—值对"><a href="#遍历所有的键—值对" class="headerlink" title="遍历所有的键—值对"></a>遍历所有的键—值对</h4><p>items() -&gt;方法以列表返回可遍历的(键, 值) 元组数组。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key, value in user_0.items():    </span><br><span class="line">	print(&quot;\nKey: &quot; + key)     </span><br><span class="line">	print(&quot;Value: &quot; + value)</span><br></pre></td></tr></table></figure>

<h4 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h4><p>keys()-&gt; 方法返回一个可迭代对象“键”，for name in favorite_languages.keys(） </p>
<p> list()-&gt; 来转换为列表。 </p>
<h4 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h4><p>Values()-&gt;返回值列表  for name in favorite_languages.keys(） </p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><h4 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h4><p> range()-&gt; 函数可创建一个整数列表，一般用在 for 循环中 </p>
<blockquote>
<blockquote>
<p>range(1, 11) # 从 1 开始到 11 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </p>
</blockquote>
</blockquote>
<p>字典中我们可以再次嵌套字典；输出时用for即可输出 </p>
<h4 id="在字典中储存列表"><a href="#在字典中储存列表" class="headerlink" title="在字典中储存列表"></a>在字典中储存列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;     &#x27;jen&#x27;: [&#x27;python&#x27;, &#x27;ruby&#x27;],     &#x27;sarah&#x27;: [&#x27;c&#x27;],     &#x27;edward&#x27;: [&#x27;ruby&#x27;, &#x27;go&#x27;],     &#x27;phil&#x27;: [&#x27;python&#x27;, &#x27;haskell&#x27;]&#125;  </span><br><span class="line">for name, languages in favorite_languages.items():            </span><br><span class="line">	print(&quot;\n&quot; + name.title() + &quot;&#x27;s favorite languages are:&quot;) </span><br><span class="line">    	for language in languages: </span><br><span class="line">			print(&quot;\t&quot; + language.title()) </span><br></pre></td></tr></table></figure>
<p>输出 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jen&#x27;s favorite languages are:      Python      Ruby   </span><br><span class="line"></span><br><span class="line">Sarah&#x27;s favorite languages are:      C   </span><br><span class="line"></span><br><span class="line">Phil&#x27;s favorite languages are:      Python      Haskell   </span><br><span class="line"></span><br><span class="line">Edward&#x27;s favorite languages are:      Ruby      Go  </span><br></pre></td></tr></table></figure>

<h4 id="在字典中储存字典"><a href="#在字典中储存字典" class="headerlink" title="在字典中储存字典"></a>在字典中储存字典</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users = &#123;     &#x27;aeinstein&#x27;: &#123;         &#x27;first&#x27;: &#x27;albert&#x27;,         &#x27;last&#x27;: &#x27;einstein&#x27;,         &#x27;location&#x27;: &#x27;princeton&#x27;,         &#125;,  </span><br><span class="line">    &#x27;mcurie&#x27;: &#123;         &#x27;first&#x27;: &#x27;marie&#x27;,         &#x27;last&#x27;: &#x27;curie&#x27;,         &#x27;location&#x27;: &#x27;paris&#x27;,         &#125;   &#125; </span><br><span class="line">for username, user_info in users.items(): </span><br><span class="line">     print(&quot;\nUsername: &quot; + username)  </span><br><span class="line">     full_name = user_info[&#x27;first&#x27;] + &quot; &quot; + user_info[&#x27;last&#x27;] </span><br><span class="line">     location = user_info[&#x27;location&#x27;]  </span><br><span class="line">     print(&quot;\tFull name: &quot; + full_name.title()) </span><br><span class="line">     print(&quot;\tLocation: &quot; + location.title())  </span><br></pre></td></tr></table></figure>

<p>另一种输出方法 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For username , user_info in sers.items(): </span><br><span class="line">   print(&quot;\nUsername:&quot;+username) </span><br><span class="line">   for s,n in sers[username].items(): </span><br><span class="line">       print(s+&quot;:&quot;+n)</span><br></pre></td></tr></table></figure>
<h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第六章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第六章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第六章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第六章</h2><h3 id="函数input-（）的工作原理"><a href="#函数input-（）的工作原理" class="headerlink" title="函数input （）的工作原理"></a>函数input （）的工作原理</h3><p>Input()-&gt;让程序暂停运行，等待用户输入（用户按回车后运行） </p>
<p>message = input(“Tell me something, and I will repeat it back to you: “) print(message)  </p>
<h3 id="编写清晰的程序"><a href="#编写清晰的程序" class="headerlink" title="编写清晰的程序"></a>编写清晰的程序</h3><h2 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第七章"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-第七章" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第七章"></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第七章</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre><code> def  greet_user():       #定义一个函数 
</code></pre>
<p>“””显示简单的问候语”””   #文档字符串的注释用三个括号 </p>
<p>print(“Hello!”) </p>
<p>greet_user() </p>
<p>中间的称为函数体 </p>
<h4 id="向函数传递信息"><a href="#向函数传递信息" class="headerlink" title="向函数传递信息"></a>向函数传递信息</h4><p> def greet_user(username):        #添加username可指定任何值 </p>
<pre><code>     &quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;  

     print(&quot;Hello, &quot; + username.title() + &quot;!&quot;)   #输出时print前需要空格 
</code></pre>
<p>  greet_user(‘jesse’)      #调用函数 （可调用任意次） </p>
<h4 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a>实参和形参</h4><p>以上面代码username是形参，在最后一行greet_user(“jesse”)中，值“jesse”是实参 </p>
<p>实参是调用函数时传递给函数的信 息 </p>
<h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><p>的关联方式是基于实参的顺序。这种关联方式被称为位置实参 </p>
<p>  def describe_pet(animal_type, pet_name): </p>
<pre><code>       &quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot; 

        print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;) 

        print(&quot;My &quot; + animal_type + &quot;&#39;s name is &quot; + pet_name.title() + &quot;.&quot;) 
</code></pre>
<p>  describe_pet(‘hamster’, ‘harry’) </p>
<p>  describe_pet(‘dog’, ‘willie’) #要再描述一个宠物，只需再次调用describe_pet()即可 </p>
<h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><p>关键字实参是传递给函数的名称—值对 </p>
<p>describe_pet(animal_type=’hamster’, pet_name=’harry’) </p>
<p> describe_pet(pet_name=’harry’, animal_type=’hamster’)  </p>
<p>以上两个函数调用是等效的（实参的顺序无关紧要） </p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用 指定的实参值；否则，将使用形参的默认值。因此，，给形参指定默认值后，可在函数调用中省略 相应的实参。 </p>
<p>默认值只需在定义时赋值：def describe_pet(pet_name, animal_type=’dog’): </p>
<h4 id="等效的函数调用"><a href="#等效的函数调用" class="headerlink" title="等效的函数调用"></a>等效的函数调用</h4><h4 id="避免实参错误"><a href="#避免实参错误" class="headerlink" title="避免实参错误"></a>避免实参错误</h4><p>实现一一对应 </p>
<h3 id="返回值（函数返回的值return）"><a href="#返回值（函数返回的值return）" class="headerlink" title="返回值（函数返回的值return）"></a>返回值（函数返回的值return）</h3><h4 id="返回简单值"><a href="#返回简单值" class="headerlink" title="返回简单值"></a>返回简单值</h4><p> def get_formatted_name(first_name, last_name):     “””返回整洁的姓名”””      full_name = first_name + ‘ ‘ + last_name      return full_name.title() //返回函数值 </p>
<p> musician = get_formatted_name(‘jimi’, ‘hendrix’) print(musician)  </p>
<h4 id="让实参变成可选的"><a href="#让实参变成可选的" class="headerlink" title="让实参变成可选的"></a>让实参变成可选的</h4><p>def get_formatted_name(first_name, last_name, middle_name=’’): 再用if判断语句来判断middle_name中有无值出现 </p>
<h4 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h4><p>defbuild_person(first_name,last_name): </p>
<p>“””返回一个字典，其中包含有关一个人的信息””” </p>
<p>person={‘first’:first_name,’last’:last_name} </p>
<p>returnperson </p>
<p>musician=build_person(‘jimi’,’hendrix’) </p>
<p>print(musician) </p>
<p>输出{‘first’: ‘jimi’, ‘last’: ‘hendrix’} </p>
<h4 id="结合使用函数和while循环"><a href="#结合使用函数和while循环" class="headerlink" title="结合使用函数和while循环"></a>结合使用函数和while循环</h4><p>while True:     print(“\nPlease tell me your name:”)     print(“(enter ‘q’ at any time to quit)”)  </p>
<p>简单whlie死循环；可用break退出循环； </p>
<h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><p>defgreet_users(names): </p>
<p>“””向列表中的每位用户都发出简单的问候””” </p>
<p>fornameinnames: </p>
<p>msg=”Hello,”+name.title()+”!” </p>
<p>print(msg) </p>
<p>usernames=[‘hannah’,’ty’,’margot’] </p>
<p>greet_users(usernames) </p>
<h4 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h4><p>defprint_models(unprinted_designs,completed_models): </p>
<p>“””模拟打印每个设计，直到没有未打印的设计为止 </p>
<p>打印每个设计后，都将其移到列表completed_models中””” </p>
<p>whileunprinted_designs: </p>
<p>current_design=unprinted_designs.pop()#将unprinted_designs中最后一个赋给currnt_desige </p>
<p>#模拟根据设计制作3D打印模型的过程 </p>
<p>print(“Printingmodel:”+current_design) </p>
<p>completed_models.append(current_design)#将unprinted_desigens倒叙赋给completed_models </p>
<p>defshow_completed_models(completed_models): </p>
<p>“””显示打印好的所有模型””” </p>
<p>print(“\nThefollowingmodelshavebeenprinted:”) </p>
<p>forcompleted_modelincompleted_models: </p>
<p>print(completed_model) </p>
<p>unprinted_designs=[‘iphonecase’,’robotpendant’,’dodecahedron’] </p>
<p>completed_models=[] </p>
<p>print_models(unprinted_designs,completed_models) </p>
<p>show_completed_models(completed_models) </p>
<h4 id="禁止函数修改"><a href="#禁止函数修改" class="headerlink" title="禁止函数修改"></a>禁止函数修改</h4><p>可向函数传 递列表的副本而不是原件 </p>
<p>function_name ( list_name [:])//切片表示法创建列表的副本 </p>
<h3 id="传递任意值数量的实参"><a href="#传递任意值数量的实参" class="headerlink" title="传递任意值数量的实参"></a>传递任意值数量的实参</h3><p>def make_pizza(*toppings):     “””打印顾客点的所有配料”””     print(toppings)          make_pizza(‘pepperoni’) make_pizza(‘mushrooms’, ‘green peppers’, ‘extra cheese’)  </p>
<p>形参名*toppings中星号创建一个名为toppings的空元组； </p>
<h4 id="结合使用位置实参和任意数量实参"><a href="#结合使用位置实参和任意数量实参" class="headerlink" title="结合使用位置实参和任意数量实参"></a>结合使用位置实参和任意数量实参</h4><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在 后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到后一个形参中。  </p>
<p>def make_pizza(size, *toppings):  </p>
<h4 id="任意函数数量的关键字实参"><a href="#任意函数数量的关键字实参" class="headerlink" title="任意函数数量的关键字实参"></a>任意函数数量的关键字实参</h4><p>defbuild_profile(first,last,**user_info): </p>
<p>“””创建一个字典，其中包含我们知道的有关用户的一切””” </p>
<p>profile={} </p>
<p>profile[‘first_name’]=first </p>
<p>profile[‘last_name’]=last </p>
<p>forkey,valueinuser_info.items(): </p>
<p>profile[key]=value </p>
<p>returnprofile </p>
<p>user_profile=build_profile(‘albert’,’einstein’,location=’princeton’,field=’physics’)//键-值对 </p>
<p>print(user_profile) </p>
<p>输出{‘first_name’: ‘albert’, ‘last_name’: ‘einstein’, ‘location’: ‘princeton’, ‘field’: ‘physics’}  </p>
<p>形参名**user_info两个星号创建一个名为user_info的空字典 </p>
<h3 id="将函数储存在模块中"><a href="#将函数储存在模块中" class="headerlink" title="将函数储存在模块中"></a>将函数储存在模块中</h3><p>函数的优点之一是，使用它们可将代码块与主程序分离。 </p>
<p>import语句允许在当前运行的程序文件中使用模块中的代码。 </p>
<h4 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h4><p>Import XXXX-&gt;在其他文件中调用函数的前提 </p>
<p>import pizza  </p>
<p> pizza.make_pizza(16, ‘pepperoni’) pizza.make_pizza(12, ‘mushrooms’, ‘green peppers’, ‘extra cheese’)  </p>
<p>要写pizza.make_pizza：pizza不能省 </p>
<h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：  </p>
<p>from module_name import function_0 , function_1 , function_2 </p>
<p>from pizza import make_pizza  </p>
<p>make_pizza(16, ‘pepperoni’) make_pizza(12, ‘mushrooms’, ‘green peppers’, ‘extra cheese’)  </p>
<p>可以省去pizza </p>
<h4 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用as给函数指定别名</h4><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短 而独一无二的别名——函数的另一个名称  </p>
<p>给函数make_pizza()指定了别名mp()。这是在import语句中使用make_pizza as mp实现的， 关键字as将函数重命名为你提供的别名： </p>
<p>from pizza import make_pizza as mp  </p>
<p>mp(16, ‘pepperoni’) mp(12, ‘mushrooms’, ‘green peppers’, ‘extra cheese’)  </p>
<h4 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h4><p>import pizza as p // </p>
<p>p.make_pizza(16, ‘pepperoni’) p.make_pizza(12, ‘mushrooms’, ‘green peppers’, ‘extra cheese’)  </p>
<h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><p>使用星号（*）运算符可让Python导入模块中的所有函数：  </p>
<h3 id="函数编写指南"><a href="#函数编写指南" class="headerlink" title="函数编写指南"></a>函数编写指南</h3><p>应给函数指定描述性名称，且只在其中使用小写字母和下 划线 </p>
<p>给形参指定默认值时，等号两边不要有空格：  </p>
<p>def function_name ( parameter_0 , parameter_1 =’ default value ‘)  </p>
<p>对于函数调用中的关键字实参，也应遵循这种约定：  </p>
<p>function_name ( value_0 , parameter_1 =’ value ‘)  </p>
]]></content>
      <categories>
        <category>Python笔记</category>
      </categories>
  </entry>
  <entry>
    <title>在VMware16中创建虚拟机安装ubuntu 21.04系统</title>
    <url>/2021/10/18/VMware-ubuntu/</url>
    <content><![CDATA[<table>
<tr><td bgcolor="CFCFCF">此篇是创建VMware16虚拟机安装ubuntu21.04系统的超详细操作过程，希望对小白白有所帮助
</td></tr></table>

<span id="more"></span>

<p>安装环境： windows 10</p>
<p>VMware 16安装包：我用阿里云盘分享了「VMware-workstation-full-16.1.2-17966106.exe」，你可以不限速下载🚀<br>复制这段内容打开「阿里云盘」App 即可获取<br>链接：<a href="https://www.aliyundrive.com/s/7acSRwmGho2">https://www.aliyundrive.com/s/7acSRwmGho2</a></p>
<p>ubuntu 21.04镜像：链接：<a href="https://pan.baidu.com/s/1ktE78cieRE9Y7_BhrG9vjQ">https://pan.baidu.com/s/1ktE78cieRE9Y7_BhrG9vjQ</a><br>提取码：n9ms</p>
<h3 id="安装VMware-16"><a href="#安装VMware-16" class="headerlink" title="安装VMware 16"></a>安装VMware 16</h3><p>1、 直接双击下载好的VMware，这个过程可能会显示重新启动系统，那你点就是了。重新启动后再次双击下载好的VMware，然后点击【下一步】。</p>
<img src="https://i.loli.net/2021/10/18/X4BvRZr2LKb5SyD.jpg" width="850" height="400" div align="right">

<p>2、勾选【我接受许可协议中的条款】，点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/Prph8EuT6vaHiyQ.jpg" width="850" height="400" div align="right">

<p>3、可以默认，也可更改安装位置</p>
<img src="https://i.loli.net/2021/10/18/DqtysojVQrFE2R9.jpg" width="850" height="400" div align="right">

<p>4、选择安装位置，然后点击【确定】</p>
<img src="https://i.loli.net/2021/10/18/VzTAbUosOP4dK3W.jpg" width="850" height="400" div align="right">

<p>5、点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/DqtysojVQrFE2R9.jpg" width="850" height="400" div align="right">

<p>6、取消勾选【启动时检查产品更新】和【加入VMware客户体验改进计划】，点击【下一步</p>
<img src="https://i.loli.net/2021/10/18/ONQ954xcuaLZYBK.jpg" width="850" height="400" div align="right">

<p>7、点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/n2RPhJVXakzLgHU.jpg" width="850" height="400" div align="right">

<p>8、点击【安装】</p>
<img src="https://i.loli.net/2021/10/18/xe8kFh4T72tSAld.jpg" width="850" height="400" div align="right">

<p>9、正在安装，等待几分钟</p>
<img src="https://i.loli.net/2021/10/18/KzBpH8OeDyn5V3F.jpg" width="850" height="400" div align="right">

<p>10、点击【许可证】</p>
<img src="https://i.loli.net/2021/10/18/AaUSlwWnMCFJ3c1.jpg" width="850" height="400" div align="right">

<p>11、框中输入许可证：ZF3R0-FHED2-M80TY-8QYGC-NPKYF，（复制粘贴就可以）然后点击【输入】</p>
<p>12、点击【完成】</p>
<p>恭喜你这会你的虚拟机已经安装好了，是不是直接点击下一步就可以</p>
<h3 id="在VMware中安装ubuntu-21-04系统"><a href="#在VMware中安装ubuntu-21-04系统" class="headerlink" title="在VMware中安装ubuntu 21.04系统"></a>在VMware中安装ubuntu 21.04系统</h3><p>1、双击打开你创建在桌面的虚拟机，然后点击【创建新的虚拟机】</p>
<img src="https://i.loli.net/2021/10/18/QWASzB7OuMIb6xm.jpg" width="850" height="400" div align="right">

<p>2、选择【典型】（默认便是典型），点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/9CzmqQYUDNeRo56.jpg" width="850" height="400" div align="right">

<p>3、选择【稍后安装操作系统】，点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/XZi389ajePvqRDk.jpg" width="850" height="400" div align="right">

<p>4、客户机操作系统选择【Linux】，版本选择【Ubuntu64位】，然后点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/XAgZ4IvWTji5CUK.jpg" width="850" height="400" div align="right">

<p>5、位置可更改，点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/owxQLiVrmWdJsYa.jpg" width="850" height="400" div align="right">

<p>6、最大磁盘大小【20】GB，选择【将虚拟机磁盘拆分成多个文件】，然后点击【下一步】</p>
<img src="https://i.loli.net/2021/10/18/DKBEnuG6or3f4wx.jpg" width="850" height="400" div align="right">

<p>7、点击【自定义硬件】</p>
<img src="https://i.loli.net/2021/10/18/VlZBfoPbR9e8MSc.jpg" width="850" height="400" div align="right">

<p>8、选择【内存】，此虚拟机的内存设为【2048MB】</p>
<img src="https://i.loli.net/2021/10/18/AdjlBFmEVDNhr1O.jpg" width="850" height="400" div align="right">

<p>9、选择【新CD/DVD(TATA)】后选择【使用ISO映像文件】，点击【浏览】，找到下载后文件夹里面的【ubuntu-21.04-desktop-amd64.iso】这个镜像并选择！</p>
<img src="https://i.loli.net/2021/10/18/C8p4cyMIBuGbYWU.jpg" width="850" height="400" div align="right">

<p>10、选择【网络适配器】，然后选择【仅主机模式】</p>
<img src="https://i.loli.net/2021/10/18/IyBJxuMrLhml3Ko.jpg" width="850" height="400" div align="right">

<p>11、选择【USB控制器】，点击【移除】</p>
<img src="https://i.loli.net/2021/10/18/HwJm6DONtYMhFCz.jpg" width="850" height="400" div align="right">

<p>12、选择【打印机】，点击【移除】</p>
<img src="https://i.loli.net/2021/10/18/cjkhgORexpbFm4K.jpg" width="850" height="400" div align="right">

<p>13、点击【关闭】</p>
<img src="https://i.loli.net/2021/10/18/pfz13yURdGDW8qI.jpg" width="850" height="400" div align="right">

<p>14、点击【完成】</p>
<img src="https://i.loli.net/2021/10/18/VlZBfoPbR9e8MSc.jpg" width="850" height="400" div align="right">

<p><font color="red" size="5"> 实在没有耐心放图片了，等闲了再贴图片吧,相信自己即使看文字你也可以安装完成的，加油！</font></p>
<p>15、点击【开启此虚拟机】，等待开启</p>
<p>16、择【中文简体】，点击【安装Ubuntu】</p>
<p>17、点击【继续】</p>
<p>18、点击【继续】</p>
<p>19、点击【现在安装】</p>
<p>20、点击【继续】</p>
<p>21、这里默认【Shanghai】就OK</p>
<p>22、创建用户账号（记住密码哦！）。不要担心你的计算机名是什么，你只需要输入姓名，计算机名就会自动生成。然后点击[继续]</p>
<p>23、安装中，耐心等待（这个可能需要多点时间）</p>
<p>24、点击【现在重启】，重启一会看屏幕中下方转圈其他都不动，键盘上点击【enter】</p>
<p>25、点击账户，我这里是【simon-yian】</p>
<p>26、输入之前创建用户账号时设的密码，然后点击【登录】</p>
<p>27、至此Ubuntu系统安装完成！</p>
<p><font color="red"><b>如果你觉得可以千万不要忘记动动你的小手，赞赏一下贫困的博客主</b><br><b>记得收藏啊，以后会有更好的内容给您分享</b></font></p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
  </entry>
  <entry>
    <title>培训心得20220627</title>
    <url>/2022/06/27/XiAnTrain20220627/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;学习打卡第一天</strong></em></p>
<span id="more"></span>
<h1 id="1-1HTML简介"><a href="#1-1HTML简介" class="headerlink" title="1. 1HTML简介"></a>1. 1HTML简介</h1><p>&emsp;&emsp;&emsp;HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>&emsp;&emsp;&emsp;自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>&emsp;&emsp;&emsp;万维网（world wide web，简称www）上的一个超媒体文档称之为一个页面（外语：page）。作为一个组织或者个人在万维网上放置开始点的页面称为主页（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的指针（超级链接），所谓超级链接，就是一种统一资源定位器（Uniform Resource Locator，外语缩写：URL）指针，通过激活（点击）它，可使浏览器方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列页面的有机集合称为网站（Website或Site）。超文本标记语言（英文缩写：HTML）是为“网页创建和其它可在网页浏览器中看到的信息”设计的一种标记语言。<br>&emsp;&emsp;&emsp;网页的本质就是超文本标记语言，通过结合使用其他的Web技术（如：脚本语言、公共网关接口、组件等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（Web）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。</p>
<h2 id="1-2-HTML版本"><a href="#1-2-HTML版本" class="headerlink" title="1.2 HTML版本"></a>1.2 HTML版本</h2><p>&emsp;&emsp;&emsp;HTML是用来标记Web信息如何展示以及其他特性的一种语法规则，它最初于1989年由CERN的Tim Berners-Lee发明。HTML基于更古老一些的语言SGML定义，并简化了其中的语言元素。这些元素用于告诉浏览器如何在用户的屏幕上展示数据，所以很早就得到各个Web浏览器厂商的支持。 [5]<br>HTML历史上有如下版本： [5]<br>①HTML 1.0：在1993年6月作为互联网工程工作小组(IETF)工作草案发布。<br>②HTML 2.0：1995年1 1月作为RFC 1866发布，于2000年6月发布之后被宣布已经过时。<br>③HTML 3.2：1997年1月14日，W3C推荐标准。<br>④HTML 4.0：1997年12月18日，W3C推荐标准。<br>⑤HTML 4.01（微小改进）：1999年12月24日，W3C推荐标准。<br>⑥HTML 5：HTML5是公认的下一代Web语言，极大地提升了Web在富媒体、富内容和富应用等方面的能力，被喻为终将改变移动互联网的重要推手。Internet Explorer 8及以前的版本不支持。</p>
<h2 id="1-3-迎接新的Web时代"><a href="#1-3-迎接新的Web时代" class="headerlink" title="1.3 迎接新的Web时代"></a>1.3 迎接新的Web时代</h2><p>&emsp;&emsp;&emsp;HTML5并不是革命性的改变，而只是发展性的。而且对于之前HTML4的很多标准都是兼容的，所有通过最新HTML5标准制作的Web应用也可以轻松的在老版本的浏览器上运行。HTML5标准中的确是集成了很多实用的功能比如：音视频、本地存储、Socket通信、动画等都是之前应用开发中确实感觉到Web端的鸡肋才得到重视和升级的。<br>HTML5的目标是：它通过一些新标签，新功能为开发更加简、独立、标准的通用Web应用提供了标准。新的标准解决了三大问题：浏览器兼容问题，解决了文档结构不明确的问题，解决了Web应用程序功能受限等问题。<br>号称“CSS之父”的Hakon Wium Lie认为，HTML5与CSS3将是全球互联网发展的未来趋势。<br>自从2010年HTML5正式推出以来，它就以一种惊人的速度被迅速推广使用，微软也因此在IE上做了关于HTML5的标准改进，使其能够支持HTML5，google Chrome，Safari，Opera，Mozilla等主要Web浏览器也针对HTML5制定了相应的支持措施。<br>目前主流的浏览器厂商也纷纷在研发HTML5相关产品，从目前这些浏览器对HTML5的支持来看，Web的未来属于HTML5</p>
<h2 id="1-4-HTML的开发环境和运行环境"><a href="#1-4-HTML的开发环境和运行环境" class="headerlink" title="1.4 HTML的开发环境和运行环境"></a>1.4 HTML的开发环境和运行环境</h2><p>&emsp;&emsp;&emsp;HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等<br>&emsp;&emsp;&emsp;前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件<br>HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p>
<h2 id="1-5-HTML文档结构"><a href="#1-5-HTML文档结构" class="headerlink" title="1.5 HTML文档结构"></a>1.5 HTML文档结构</h2><p>HTML文档有明确的文档结构，包含三个部分：<code>&lt;HTML&gt;中包含&lt;head&gt;...&lt;/head&gt;部分和&lt;body&gt;...&lt;/body&gt;部分</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：</span><br><span class="line">1. 第1行，HTML5的文档声明，声明开发版本</span><br><span class="line">2. 第2行，&lt;html&gt;表示HTML的文档起点，&quot;lang=en&quot;表示开发语言为英语，与之对应的在文档的最后一行&lt;/html&gt;表示文档的结束位置</span><br><span class="line">3. 第3，6行，表示文档的头部信息，该部分中的内容不在浏览器的主体中显示，文档头部中主要用来做一些辅助功能。</span><br><span class="line">4. 第4行，&lt;meta&gt;是&lt;head&gt;中的一个辅助性标签，不包含任何内容，它的属性定义了与文档相关联的名称/值，它提供了相关页面的元信息如：针对搜索引擎和更新频度的描述和关键词， 详见下节&lt;meta&gt;标签</span><br><span class="line">5. 第5行，&lt;title&gt;用来添加网页的标题，网页标题显示在浏览器的标题栏中</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Hello-World"><a href="#1-6-Hello-World" class="headerlink" title="1.6 Hello World"></a>1.6 Hello World</h2><h3 id="1-创建html文件，并键入如下代码："><a href="#1-创建html文件，并键入如下代码：" class="headerlink" title="1. 创建html文件，并键入如下代码："></a>1. 创建html文件，并键入如下代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;我的第一个网页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    Hello World</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2. 运行结果"></a>2. 运行结果</h3><h2 id="1-7-标签"><a href="#1-7-标签" class="headerlink" title="1.7 标签"></a>1.7 <meta>标签</h2><p>● *<code>&lt;meta&gt;</code><em>标签位于</em><code>&lt;head&gt;</code>*标签区域内提供了HTML的文档元数据（注：元数据是数据的数据信息且元数据不会显示在客户端，但是会被浏览器解析）<br>● *<code>&lt;meta&gt;</code>*标签提供了文档的字符集，使用语言，作者等基本信息，此外还涉及关键词和网页等级设定<br>● *<code>&lt;meta&gt;</code>*标签常用属性表<br>| 属性 |    值 | 描述 |<br>| — | — | — |<br>| charset |    character_set |    定义文档的字符编码。|<br>| content |    text |    定义与 http-equiv 或 name 属性相关的元信息。|<br>| http-equiv |    content-typ<br>                edefault-style<br>                refresh            | 把 content 属性关联到 HTTP 头部。|</p>
<p>|name|<br>    application-nam<br>eauthor<br>description<br>generator<br>keywords|    把 content 属性关联到一个名称。|</p>
<p>|scheme| format/URI | HTML5不支持。定义用于翻译 content 属性值的格式。|</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!--声明文档的字符编码，中文常用的还有GBK，gb2312--&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;!--页面关键词--&gt;</span><br><span class="line">　　&lt;meta name=&quot;keywords&quot; content=&quot;软件咨询，软件开发，影视后期&quot;/&gt;</span><br><span class="line">　　&lt;!--页面描述--&gt;</span><br><span class="line">　　&lt;meta name=&quot;description&quot; content=&quot;软件开发，影视后期，我们可以快速的帮你提升职业技能水平&quot;&gt;</span><br><span class="line">　　&lt;!--网页作者--&gt;</span><br><span class="line">　　&lt;meta name=&quot;author&quot; content=&quot;Mr.cai&quot;&gt;</span><br><span class="line">　　&lt;!--搜索引擎抓取robots是一组使用逗号（，）分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。--&gt;</span><br><span class="line">　　&lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;/&gt;</span><br><span class="line">    &lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，但搜索引擎可以通过此网页的链接继续索引其它网页--&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot;/&gt;</span><br><span class="line">    &lt;!--上面示例定义此网页被搜索引擎索引进数据库，但搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;none&quot;/&gt;</span><br><span class="line">    &lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，且搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span><br><span class="line">    &lt;!--针对谷歌GOOGLEBOT使用robots--&gt;</span><br><span class="line">    &lt;!--可以将name的属性只定义为GOOGLEBOT标识为谷歌搜索引擎。 使用元标记拦截或删除网页--&gt;</span><br><span class="line">    &lt;meta name=&quot;googlebot&quot; content=&quot;noindex, nofollow&quot;/&gt;</span><br><span class="line">    &lt;!--针对百度baiduspider使用robots--&gt;</span><br><span class="line">    &lt;!--可以将name的属性只定义为baiduspider标识为百度搜索引擎。禁止搜索引擎收录的方法--&gt;</span><br><span class="line">    &lt;meta name=&quot;baiduspider&quot; content=&quot;noarchive&quot;/&gt;</span><br><span class="line">　　&lt;!--页面重定向和刷新--&gt;</span><br><span class="line">　　&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com&quot;/&gt;</span><br><span class="line">　　&lt;!--禁止Chrome浏览器中自动提示翻译--&gt;</span><br><span class="line">　　&lt;meta name=&quot;google&quot; value=&quot;notranslate&quot;&gt;</span><br><span class="line">　　&lt;!--禁止百度转码--&gt;</span><br><span class="line">　　&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot;&gt;</span><br><span class="line">　　&lt;!--自定义标签：app版本号说明--&gt;</span><br><span class="line">　　&lt;meta name=&quot;app-version&quot;content=&quot;1.13.3&quot;&gt;</span><br><span class="line">    &lt;title&gt;meta&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-8-元素"><a href="#1-8-元素" class="headerlink" title="1.8 元素"></a>1.8 元素</h2><p>&emsp;&emsp;&emsp;HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成<br>&lt;开始标签&gt;    元素内容    &lt;/结束标签&gt;<br>HTML元素以开始标签起始    元素内容即开始标签和结束标签之间的内容    HTML元素以结束标签终结</p>
<h2 id="1-9-块级标签和行级标签"><a href="#1-9-块级标签和行级标签" class="headerlink" title="1.9 块级标签和行级标签"></a>1.9 块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p>
<h3 id="1-9-1-块级标签"><a href="#1-9-1-块级标签" class="headerlink" title="1.9.1 块级标签"></a>1.9.1 块级标签</h3><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p>
<h3 id="1-9-2-行级标签"><a href="#1-9-2-行级标签" class="headerlink" title="1.9.2 行级标签"></a>1.9.2 行级标签</h3><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p>
<h2 id="1-10-HTML常用标签"><a href="#1-10-HTML常用标签" class="headerlink" title="1.10 HTML常用标签"></a>1.10 HTML常用标签</h2><h3 id="1-10-1-常用的块级标签"><a href="#1-10-1-常用的块级标签" class="headerlink" title="1.10.1 常用的块级标签"></a>1.10.1 常用的块级标签</h3><p>● 标题标签<br>     ○ 标题（Heading）通过<code>&lt;h1&gt;....&lt;h6&gt;</code>标签定义，表示一级标题至六级标题，其中<code>&lt;h1&gt;</code>最大，<code>&lt;h6&gt;</code>最小<br>     ○ 标题标签只用于标题<br>     ○ 标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引<br> 代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;标题标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;一级标题&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;二级标题&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;三级标题&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;四级标题&lt;/h4&gt;</span><br><span class="line">    &lt;h5&gt;五级标题&lt;/h5&gt;</span><br><span class="line">    &lt;h6&gt;六级标题&lt;/h6&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure>

<p>● 段落标签<br>     ○ 段落通过<code>&lt;p&gt;...&lt;/p&gt;</code>标签定义，表示文档中的一个自然段<br>     ○ 注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用<code>&lt;br/&gt;</code>标签换行<br>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        面朝大海，春暖花开&lt;br/&gt;</span><br><span class="line">        作者: 海子</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;从明天起，做一个幸福的人&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;喂马，劈柴，周游世界&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;从明天起，关心粮食和蔬菜&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;我有一所房子，面朝大海，春暖花开&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;从明天起，和每一个亲人通信&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;告诉他们我的幸福&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;那幸福的闪电告诉我的&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;我将告诉每一个人&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;给每一条河每一座山取一个温暖的名字&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;陌生人，我也为你祝福&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;愿你有一个灿烂的前程&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;愿你有情人终成眷属&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;愿你在尘世获得幸福&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;我只愿面朝大海，春暖花开&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>● div标签<br>     ○ div标签用于定义文档中的分区或节<br>     ○ 可以把文档分割为独立的，不同的部分<br>     ○ 在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度<br>     ○ div若不带样式单独使用则与段落标签<code>&lt;p&gt;</code>相似，没有特定的含义<br>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;无序列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">  		这是div标签，用于页面划分页面布局</span><br><span class="line">  	&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>   ● 无序列表<br>     ○ 列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接<br>     ○ 无序列表使用<ul>定义列表，<li>定义列表中的条目，默认此列项目使用黑色小圆点进行标记<br>     ○ 通过在<ul>中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆<br>代码：</ul></li></ul></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;无序列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul type=&quot;square&quot;&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul type=&quot;circle&quot;&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>   ● 有序列表<br>     ○ 有序列表使用<ol>定义列表，<li>定义列表中的条目，默认此列项目使用阿拉伯数字进行标记<br>     ○ 通过在<ol>中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）<br>代码：</ol></li></ol></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;有序列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;工作流程&lt;/h3&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;每日晨会，任务分配&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;工作任务&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;工作日报&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;下班回家&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol type=&quot;A&quot;&gt;</span><br><span class="line">          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作任务&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作日报&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;下班回家&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol type=&quot;a&quot;&gt;</span><br><span class="line">          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作任务&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作日报&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;下班回家&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol type=&quot;I&quot;&gt;</span><br><span class="line">          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作任务&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作日报&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;下班回家&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol type=&quot;i&quot;&gt;</span><br><span class="line">          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作任务&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;工作日报&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;下班回家&lt;/li&gt;</span><br><span class="line">     &lt;/ol&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>   ● 自定义列表<br>     ○ 使用<dl>定义列表，<dt>定义列表中的项目，<dd>定义列表条目<br>     ○ 自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分<br>代码：</dd></dt></dl></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;自定义列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;pc端游戏&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;穿越火线&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;英雄联盟&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;CSGO&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;手机游戏&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;和平精英&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;王者荣耀&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;阴阳师&lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>   ● 嵌套列表<br>     ○ 列表可以通过多层嵌套实现多级列表<br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;嵌套列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;茶</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;白茶&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;绿茶&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;红茶&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;咖啡</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;拿铁&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;卡布奇洛&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-10-2-常用的行级标签"><a href="#1-10-2-常用的行级标签" class="headerlink" title="1.10.2 常用的行级标签"></a>1.10.2 常用的行级标签</h3><p>   ● 内联元素<br>     ○ 使用<span>…<span>表示<br>     ○ 单独使用没有特定的含义<br>     ○ 当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标<br>代码：</span></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;span&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;span style=&quot;font-size: 33px&quot;&gt;我&lt;/span&gt;</span><br><span class="line">        最</span><br><span class="line">        &lt;span style=&quot;font-size: 33px&quot;&gt;帅&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>   ● 链接标签<br>     ○ 使用<a href="url">…</a>表示<br>     ○ 用于从一个页面跳转到另一个页面<br>     ○ href表示跳转的链接目标<br>     ○ 默认情况下链接将以以下形式出现在网页中<br>       ■ 在未点击访问时链接字体程蓝色并带同色下划线<br>       ■ 在点击后链接字体会程红色显示并带同色下划线<br>     ○ 标签常用属性<br>属性    属性值    作用<br>download    filename    指定下载链接<br>href    URL    规定链接目标<br>target    _blank<br>_parent<br>_self<br>_top    _blank：新窗口打开。<br>_parent：在父窗口中打开链接。<br>_self：默认，当前页面跳转。<br>_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。<br>  ○ 在网页开发中常用的链接有以下四种：<br>链接分类    属性参数    作用<br>空链接    href=”#”<br>href=”javascript:void(0)”    空链接即只能点击不会做页面跳转的链接，用于向页面上添加对象或行为  如：设为首页，添加收藏等<br>本地链接    href=”本地路径”    用于本地工程/服务器页面之间的相互跳转<br>网络链接    herf=”url”    用于给网站添加外部链接，点击后跳转到其它网站<br>锚链接    href=”#name”    用于添加页面内快速引导，可以从页面的一个位置快速的转到另一个位置<br>空链接示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;空链接&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;a href=&quot;#&quot;&gt;空链接&lt;/a&gt;</span><br><span class="line">   &lt;a href=&quot;javascript:void(0)&quot;&gt;空链接&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>附：<br>空链接“#”与“javascript:void(0)”的区别：</p>
<ol>
<li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li>
<li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li>
<li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li>
</ol>
<p>本地链接示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;a href=&quot;Login.html&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;a href=&quot;Index.html&quot;&gt;返回首页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>附：<br>绝对路径和相对路径<br>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\Users\document\WebstormProjects\untitled15”目录中，则图片的绝对路径为“C:\Users\document\WebstormProjects\untitled15\头像.jpg”，网页的绝对路径为“C:\Users\document\WebstormProjects\untitled15\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。<br>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：<br>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可<br>位置关系图示    代码示例</p>
<pre><code>         2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\”，相对路径使用分隔符“/”
</code></pre>
<p>位置关系图示    代码示例</p>
<p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”<br>位置关系图示    代码示例</p>
<p>网络链接示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;网络链接&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>锚链接示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a id=&quot;top&quot;&gt;这是网页顶部&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;</span><br><span class="line">    &lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;....&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;</span><br><span class="line">    &lt;a id=&quot;middle&quot;&gt;这是网页中部&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;</span><br><span class="line">    &lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;....&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;</span><br><span class="line">    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;</span><br><span class="line">    &lt;a id=&quot;bottom&quot;&gt;这是网页底部&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>附：</p>
<ol>
<li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li>
<li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：<code>&lt;a name=&quot;top&quot;&gt;,&lt;div id=&quot;top&quot;&gt;</code></li>
<li>建立好锚点目标后再使用<code>&lt;a href=&quot;#id值或name值&quot;&gt;</code>引用锚点</li>
<li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;demo.html#bottom&quot;&gt;走你&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;这是内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;.....&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;此时省略若干行相同内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这是内容&lt;/p&gt;</span><br><span class="line">    &lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>● 图片标签<br>  ○ 图片标签使用<code>&lt;img/&gt;</code>表示，图片标签没有结束标签“/”表示结束<br>  ○ 标签属性<br>属性    属性值    作用<br>src（必需）    url    图片路径或网络地址<br>title    text    图片标题描述，当鼠标悬停在图片上时显示<br>alt    text    图片替换文本，当图片路径发生错误时显示<br>width    pixels    图片宽度<br>height    pixels    图片高度<br>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图片标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;F.jpg&quot; alt=&quot;这是替换文本&quot; title=&quot;这是一张图片&quot; width=&quot;600&quot; height=&quot;406&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>● 图片增强（map）<br>  ○ <code>&lt;map&gt;</code>标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。<code>&lt;map&gt;</code>标签与<code>&lt;area&gt;</code>标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像。<br>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;</span><br><span class="line">        &lt;map name=&quot;circusmap&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="知识补充："><a href="#知识补充：" class="headerlink" title="知识补充："></a>知识补充：</h2><p>  ○ <code>&lt;area&gt;</code>标签定义图像映射中的区域<br>  ○ shape属性<br>    ■ shape属性用于定义图像映射中对鼠标敏感的区域的形状<br>      ● 圆形（circ或circle）<br>      ● 多边形（poly或polygon）<br>      ● 矩形（rect或rectangle）<br>  ○ coords属性<br>    ■ 圆形：shape=”circle”，coords=”x,y,z”<br>这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。<br>    ■ 多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”<br>每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。<br>多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。<br>    ■ 矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”<br>第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。<br>● 常用文本格式化标签<br>标签    描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;	定义粗体文本</span><br><span class="line">&lt;em&gt;	定义着重文字</span><br><span class="line">&lt;i&gt;	定义斜体文字</span><br><span class="line">&lt;small&gt;	定义小号文字</span><br><span class="line">&lt;strong&gt;	定义加重语气</span><br><span class="line">&lt;sub&gt;	定义下标字</span><br><span class="line">&lt;sup&gt;	定义上标字</span><br><span class="line">&lt;ins&gt;	定义插入字(加了下划线)</span><br><span class="line">&lt;del&gt;	定义删除字(加了删除线)</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;b&gt;定义粗体文本&lt;/b&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;em&gt;定义着重文字&lt;/em&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;i&gt;定义斜体文字&lt;/i&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;small&gt;定义小号文字&lt;/small&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;strong&gt;定义加重语气&lt;/strong&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    定义下标字 &lt;sub&gt;aa&lt;/sub&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    定义上标字 &lt;sup&gt;aa&lt;/sup&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;ins&gt;定义插入字(加了下划线)&lt;/ins&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;del&gt;定义删除字(加了删除线)&lt;/del&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h2><p><em><strong>今天是到这的第一天，一起都充满着好奇。下午老师就开始讲HTML相关内容，因为之前学过目前还算很好理解。听课老师说越到后面学习越困难，不过没事到这就是来学习的，为了能找到更好的工作在所不辞。由于报道的有点迟了，到现在还没求去过宿舍，不知道宿舍的环境怎么样，很是期待。西安相对于甘肃还是很热的，幸好学习的地方都用空调，不然像静下心来学习都是问题。在接下载的几个月中弥补之前的不足，学习更多的知识，向向往的的工作不断迈进。</strong></em></p>
]]></content>
      <categories>
        <category>XiAnTrain</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="顾浩儿"><a href="#顾浩儿" class="headerlink" title="顾浩儿"></a>顾浩儿</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h3><p>为了避免不必要的错误，在生成静态文件前，强烈建议先运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Spring知识点梳理：</title>
    <url>/2021/11/27/SpringFrame/</url>
    <content><![CDATA[ <img src="https://i.loli.net/2021/11/15/vKFjo15HqAybLmE.png" align="center" width="600" height="400" div>


<span id="more"></span>

<h1 id="Spring知识点梳理："><a href="#Spring知识点梳理：" class="headerlink" title="Spring知识点梳理："></a>Spring知识点梳理：</h1><h2 id="⼀、spring的基本知识"><a href="#⼀、spring的基本知识" class="headerlink" title="⼀、spring的基本知识"></a>⼀、spring的基本知识</h2><p>官⽹地址：Spring | Home</p>
<h3 id="1-如何使⽤Ioc技术实现Bean的装配。"><a href="#1-如何使⽤Ioc技术实现Bean的装配。" class="headerlink" title="1.如何使⽤Ioc技术实现Bean的装配。"></a>1.如何使⽤Ioc技术实现Bean的装配。</h3><p>第⼀步，下载对应的Spring Framework包<br>spring.io–&gt;选择 Projects –&gt;Spring Framework –&gt;点击超链接<br>GitHub - spring-projects/spring-framework: Spring Framework<br>在打开的⻚⾯中 查找 Access to Binaries 并点击跳转<br>Spring Framework Artifacts · spring-projects/spring-framework Wiki · GitHub<br>在该⻚⾯中 查找 Downloading a Distribution 并 <a href="https://repo.spring.io/">https://repo.spring.io</a>. 跳转到下载⻚⾯.<br>下载⻚⾯的地址是: Packages - repo.spring.io<br>点击步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Artifactory--Artifacts</span><br><span class="line"> -release--</span><br><span class="line"> -org--</span><br><span class="line"> -springframework--</span><br><span class="line"> -spring--</span><br><span class="line"> -5.2.19.RELEASE</span><br></pre></td></tr></table></figure>

<p>在下图的画⾯中可以看到发布版本的下载路径：<br>repo.spring.io<br>通过该链接地址访问下载库<br>下载完成的事，得到⼀个压缩包，解压该包得到Spring Framework的资源包。<br>第⼀个⽂件夹 docs：<br>⽂件⽂件夹中都是相关的⽂档。<br>javadoc-api<br>kdoc-api<br>spring-framework-reference<br>第⼆个⽂件夹 libs:<br>这⾥⾯都是要⽤到的jar包，其中第个类别的jar包都有三种，分别是XXX-javadoc.jar，XXX-sources.ar，XXX-jar，<br>它们分别代表使⽤api的⽂档，源代码，⼆进制的发布版。<br>第三个⽂件夹 schema:<br>Spring Framework的结构图:<br>⼆、基础IoC案例：<br>⼆、基础IoC案例：<br>如何理解Spring容器管理Java对象，也就是说由Spring来完成Java Bean的创建⼯作。<br>创建⼀个Java Project，创建类对象Student<br>使⽤Spring的IoC技术来完成，Java对象的管理与使⽤。<br>⾸先在项⽬中新添加⼀个⽂件夹在项⽬的根⽬录下，与src⽬录平⾏。<br>然后将beans,context,core,expression，4个jar包拷⻉到该⽬录下(lib)，还要再添加⼀个commons-logging的jar<br>包。<br>接下来就可以使⽤Spring Framework技术。<br>在项⽬的src⽬录下创建applicationContext.xml配置⽂件，⽤于描述spring容器。<br>相关信息可以在下载的解压缩包中的docs⽬录中的spring-framework-reference⽬录中的pdf⽂件夹中的core.pdf<br>⽂件中查找到具体内容。<br>其中标签是定义容器中要管理的java类对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"> private int id;</span><br><span class="line"> private String name;</span><br><span class="line"> private String pass;</span><br><span class="line"> private int grade;</span><br><span class="line"> private Date birthday;</span><br><span class="line"> //构造⽅法</span><br><span class="line"> //get,set⽅法的创建省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> Student stu1 = new Student(1001,&quot;⽻⽣结弦&quot;,&quot;2022winter&quot;,3,new Date());</span><br><span class="line"> System.out.println(stu1);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;bean id=&quot;stu1&quot; class=&quot;com.lz.xbmu.Student&quot;&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>通过两种⽅式可以创建容器的上下⽂:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MySpringTest &#123;</span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> //⾸先要找到spring容器</span><br><span class="line"> ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"> System.out.println(context);</span><br><span class="line"> // 通过Spring容器使⽤getBean()⽅法就可以获取到相关的对象实例</span><br><span class="line"> Student stu1 = (Student) context.getBean(&quot;stu1&quot;);</span><br><span class="line"> System.out.println(stu1);</span><br><span class="line"> &#125; &#125; </span><br></pre></td></tr></table></figure>
<p>在Spring的配置⽂件中配置相关的bean:</p>
<h3 id="1-使⽤类中定义的带参数的构造⽅法来创建bean"><a href="#1-使⽤类中定义的带参数的构造⽅法来创建bean" class="headerlink" title="1.使⽤类中定义的带参数的构造⽅法来创建bean"></a>1.使⽤类中定义的带参数的构造⽅法来创建bean</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;bean id=&quot;stu1&quot; class=&quot;com.lz.xbmu.Student&quot;&gt;</span><br><span class="line"> &lt;constructor-arg index=&quot;0&quot; value=&quot;10011&quot; /&gt;</span><br><span class="line"> &lt;constructor-arg index=&quot;1&quot; value=&quot;⾕爱凌&quot; /&gt;</span><br><span class="line"> &lt;constructor-arg index=&quot;2&quot; value=&quot;123321&quot; /&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>在这⾥需要注意，bean中指定的参数要与构造⽅法的参数个数相匹配。上⾯的配置就要与下⾯的构造⽅法相匹配。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Student(int id,String name,String pass) &#123;</span><br><span class="line"> this.id = id;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.pass = pass;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-利⽤getter-setter⽅法来配置bean"><a href="#2-利⽤getter-setter⽅法来配置bean" class="headerlink" title="2.利⽤getter/setter⽅法来配置bean:"></a>2.利⽤getter/setter⽅法来配置bean:</h3><p>使⽤该试可以⾃由的指定要配置的属性值。</p>
<h3 id="3-使⽤注解的⽅式来实现："><a href="#3-使⽤注解的⽅式来实现：" class="headerlink" title="3.使⽤注解的⽅式来实现："></a>3.使⽤注解的⽅式来实现：</h3><p>注意使⽤注解的⽅式时，因为使⽤了AOP的机制，所以需要再导⼊spring-aop相关的jar包。<br>spring-aop-5.2.18.RELEASE.jar，并且将该包添加到build path路径中去。<br>Spring AOP<br>AOP的全称是Aspect-Oriented Programming，即⾯向切⾯编程（也称⾯向⽅⾯编程）。它是⾯向对象编程<br>（OOP）的⼀种补充，⽬前已成为⼀种⽐较成熟的编程⽅式。<br>虽然AOP是⼀种新的编程思想，但却不是OOP的替代品，它只是OOP的延伸和补充。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;stu2&quot; class=&quot;com.lz.xbmu.Student&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;id&quot; value=&quot;10012&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;property name=&quot;name&quot; value=&quot;苏御明&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;property name=&quot;pass&quot; value=&quot;111111&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;property name=&quot;grade&quot; value=&quot;3&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;property name=&quot;birthday&quot; value=&quot;Thu Mar 03 11:18:42 CST 2022&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component(value=&quot;stu3&quot;) //添加注解,并且给类定义名称为stu3</span><br><span class="line">public class Student &#123;</span><br><span class="line"> private int id;</span><br><span class="line"> private String name;</span><br><span class="line"> private String pass;</span><br><span class="line"> private int grade;</span><br><span class="line"> private Date birthday;</span><br><span class="line"> //其他内容略，与前⾯的类定义⼀致</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/context</span><br><span class="line"> https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- 使⽤注解的⽅式 --&gt;</span><br><span class="line"> &lt;context:annotation-config /&gt;</span><br><span class="line"> &lt;!-- 配置⾃动扫描的包路径 --&gt;</span><br><span class="line"> &lt;context:component-scan base-package=&quot;com.lz.xbmu&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>Aspect：封装的⽤于横向插⼊系统功能（如事务、⽇志等）的类<br>Joinpoint：在程序执⾏过程中的某个阶段点<br>Pointcut：切⾯与程序流程的交叉点，即那些需要处理的连接点<br>Advice（增强）：Advice 定义了在 Pointcut ⾥⾯定义的程序点具体要做的操作，它通过 before、after 和 around<br>来区别是在每个 joint point 之前、之后还是代替执⾏的代码<br>Target（⽬标对象）：织⼊ Advice 的⽬标对象<br>Weaving（织⼊）：将切⾯代码插⼊到⽬标对象上，从⽽⽣成代理对象的过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;myAspect&quot; class=&quot;com.itheima.aspectj.xml.MyAspect&quot; /&gt;</span><br><span class="line"> &lt;aop:config&gt;</span><br><span class="line"> &lt;aop:aspect id=&quot;aspect&quot; ref=&quot;myAspect&quot;&gt;</span><br><span class="line"> &lt;aop:pointcut expression=&quot;execution(* com.itheima.jdk.*.*(..))“ id=&quot;myPointCut&quot; /&gt;</span><br><span class="line"> &lt;aop:before method=&quot;myBefore&quot; pointcut-ref=&quot;myPointCut&quot; /&gt;</span><br><span class="line"> &lt;aop:after-returning method=&quot;myAfterReturning“ pointcut-ref=&quot;myPointCut&quot; </span><br><span class="line"> returning=&quot;returnVal&quot; /&gt;</span><br><span class="line"> &lt;aop:around method=&quot;myAround&quot; pointcut-ref=&quot;myPointCut&quot; /&gt;</span><br><span class="line"> &lt;aop:after-throwing method=&quot;myAfterThrowing“ pointcut-ref=&quot;myPointCut&quot; </span><br><span class="line">throwing=&quot;e&quot; /&gt;</span><br><span class="line"> &lt;aop:after method=&quot;myAfter&quot; pointcut-ref=&quot;myPointCut&quot; /&gt;</span><br><span class="line"> &lt;/aop:aspect&gt;</span><br><span class="line"> &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>

<p>项⽬案例⼀，基于xml的配置⽅式<br>在新建的项⽬中导⼊以下的包:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aspectjweaver-1.9.8.jar</span><br><span class="line">commons-logging-1.2.jar</span><br><span class="line">spring-aop-5.2.19.RELEASE.jar</span><br><span class="line">spring-aspects-5.2.19.RELEASE.jar</span><br><span class="line">spring-beans-5.2.19.RELEASE.jar</span><br><span class="line">spring-context-5.2.19.RELEASE.jar</span><br><span class="line">spring-core-5.2.19.RELEASE.jar</span><br><span class="line">spring-expression-5.2.19.RELEASE.jar</span><br><span class="line">spring-tx-5.2.19.RELEASE.jar</span><br></pre></td></tr></table></figure>

<p>并将上⾯的包添加到项⽬环境中去。BuildTo–&gt;AddToBuildPath<br>1.⾸先创建业务程序<br>UserDao及实现类UserDaoImpl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.dao;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line"> int insertUser(User user);</span><br><span class="line"> User selectUserById(int id);</span><br><span class="line">&#125;</span><br><span class="line">package com.lz.xbmu.dao.impl;</span><br><span class="line">import com.lz.xbmu.dao.UserDao;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line"> @Override</span><br><span class="line"> public int insertUser(User user) &#123;</span><br><span class="line"> // TODO Auto-generated method stub</span><br><span class="line"> //有系统级的权限检查</span><br><span class="line"> System.out.println(&quot;新增⽤户⽅法执⾏...&quot;);</span><br><span class="line"> //业务执⾏完成后，需要记录⽇志</span><br><span class="line"> return 0;</span><br><span class="line"> &#125;</span><br><span class="line"> @Override</span><br><span class="line"> public User selectUserById(int id) &#123;</span><br><span class="line"> // TODO Auto-generated method stub</span><br><span class="line"> //有系统级的权限检查</span><br><span class="line"> System.out.println(&quot;根据id查找⽤户⽅法执⾏...&quot;);</span><br><span class="line"> //业务执⾏完成后，需要记录⽇志</span><br><span class="line"> return null;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.aspect;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">//⾃定义的切⾯类，为⽬标⽅法提供增强的系统功能</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"> //前置通知</span><br><span class="line"> public void myBefore(JoinPoint joinPoint) &#123;</span><br><span class="line"> System.out.println(&quot;前置通知：模拟执⾏权限检查&quot;);</span><br><span class="line"> System.out.println(&quot;⽬标类是：&quot;+joinPoint.getTarget());</span><br><span class="line"> System.out.println(&quot;,被植⼊增强的⽬标⽅法是：&quot;+joinPoint.getSignature().getName());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/aop</span><br><span class="line"> https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"> &lt;bean id=&quot;userDao&quot; class=&quot;com.lz.xbmu.dao.impl.UserDaoImpl&quot; /&gt;</span><br><span class="line"> &lt;!-- Spring AOP --&gt;</span><br><span class="line"> &lt;bean id=&quot;myAspect&quot; class=&quot;com.lz.xbmu.aspect.MyAspect&quot;/&gt;</span><br><span class="line"> &lt;aop:config&gt;</span><br><span class="line"> &lt;!-- 配置切⾯ --&gt;</span><br><span class="line"> &lt;aop:aspect ref=&quot;myAspect&quot;&gt;</span><br><span class="line"> &lt;!-- 配置切⼊点 --&gt;</span><br><span class="line"> &lt;aop:pointcut expression=&quot;execution(* com.lz.xbmu.dao.*.*(..))&quot; id=&quot;myPointCut&quot;/&gt;</span><br><span class="line"> &lt;!-- 关联通知Advice和切⼊点pointCut --&gt;</span><br><span class="line"> &lt;!-- &lt;aop:before method=&quot;myBefore&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</span><br><span class="line"> &lt;aop:after-returning method=&quot;myAfterReturning&quot;</span><br><span class="line"> pointcut-ref=&quot;myPointCut&quot; returning=&quot;returnVal&quot;/&gt;--&gt;</span><br><span class="line"> &lt;aop:around method=&quot;myAround&quot; pointcut-ref=&quot;myPointCut&quot;/&gt;</span><br><span class="line"> &lt;/aop:aspect&gt;</span><br><span class="line"> &lt;/aop:config&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import com.lz.xbmu.dao.UserDao;</span><br><span class="line">import com.lz.xbmu.po.User;</span><br><span class="line">public class SpringAopTest &#123;</span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> ApplicationContext ctxt = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line"> //System.out.println(ctxt);</span><br><span class="line"> UserDao userDao = ctxt.getBean(UserDao.class);</span><br><span class="line"> userDao.selectUserById(110);</span><br><span class="line"> User user = new User();</span><br><span class="line"> user.setUid(1001);</span><br><span class="line"> user.setUsername(&quot;Jack&quot;);</span><br><span class="line"> user.setPassword(&quot;123123&quot;);</span><br><span class="line"> //userDao.insertUser(user);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>基于注解的AOP的配置<br>使⽤注解的myAspect</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.aspect;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.After;</span><br><span class="line">import org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">//⾃定义的切⾯类，为⽬标⽅法提供增强的系统功能</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"> //定义切⼊点表达式</span><br><span class="line"> @Pointcut(&quot;execution(* com.lz.xbmu.dao.*.*(..))&quot;)</span><br><span class="line"> private void myPointCut() &#123;&#125;</span><br><span class="line"> </span><br><span class="line"> //前置通知</span><br><span class="line"> //@Before(&quot;myPointCut()&quot;)</span><br><span class="line"> public void myBefore(JoinPoint joinPoint) &#123;</span><br><span class="line"> System.out.println(&quot;前置通知：模拟执⾏权限检查&quot;);</span><br><span class="line"> System.out.println(&quot;⽬标类是：&quot;+joinPoint.getTarget());</span><br><span class="line"> System.out.println(&quot;,被植⼊增强的⽬标⽅法是：&quot;+joinPoint.getSignature().getName());</span><br><span class="line"> System.out.println(&quot;,植⼊⽅法中的参数有：&quot;+joinPoint.getArgs()[0]);</span><br><span class="line"> &#125;</span><br><span class="line"> //后置通知</span><br><span class="line"> //@AfterReturning(pointcut = &quot;myPointCut()&quot;,returning=&quot;returnVal&quot;)</span><br><span class="line"> public void myAfterReturning(JoinPoint joinPoint,Object returnVal) &#123;</span><br><span class="line"> System.out.println(&quot;后置通知：模拟记录⽇志&quot;);</span><br><span class="line"> System.out.println(&quot;,被植⼊增强的⽬标⽅法是：&quot;+joinPoint.getSignature().getName());</span><br><span class="line"> System.out.println(returnVal);</span><br><span class="line"> &#125;</span><br><span class="line"> //环绕通知</span><br><span class="line"> //@Around(&quot;myPointCut()&quot;)</span><br><span class="line"> public Object myAround(ProceedingJoinPoint proceeding) throws Throwable &#123;</span><br><span class="line"> System.out.println(&quot;环绕开始：&quot;+proceeding.getTarget());</span><br><span class="line"> Object obj = proceeding.proceed(); //只有写了这名话，⽬标⽅法才会执⾏。</span><br><span class="line"> System.out.println(&quot;环绕结束：&quot;+proceeding.getSignature().getName());</span><br><span class="line"> return obj;</span><br><span class="line"> &#125;</span><br><span class="line"> //最终通知</span><br><span class="line"> @After(&quot;myPointCut()&quot;)</span><br><span class="line"> public void myAfter() &#123;</span><br><span class="line"> System.out.println(&quot;我是最终通知...&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/aop</span><br><span class="line"> https://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line"> http://www.springframework.org/schema/context</span><br><span class="line"> https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"> &lt;context:component-scan base-package=&quot;com.lz.xbmu&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"> &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h1 id="三、MyBatis的应⽤"><a href="#三、MyBatis的应⽤" class="headerlink" title="三、MyBatis的应⽤"></a>三、MyBatis的应⽤</h1><p>Hibernate 优点 Mybatis 优点<br>1、hibernate是全⾃动，hibernate完全可以通过<br>对象关系模型实现对数据库的操作，拥有完整的<br>JavaBean对象与数据库的映射结构来⾃动⽣成<br>sql。 2、功能强⼤，数据库⽆关性好，O/R映射能<br>⼒强，需要写的代码很少，开发速度很快。 3、有<br>更好的⼆级缓存机制，可以使⽤第三⽅缓存。 4、<br>数据库移植性良好。 5、hibernate拥有完整的⽇<br>志系统，hibernate⽇志系统⾮常健全，涉及⼴<br>泛，包括sql记录、关系异常、优化警告、缓存提<br>示、脏数据警告等<br>1、易于上⼿和掌握，提供了数据库查询的⾃动对象绑<br>定功能，⽽且延续了很好的SQL使⽤经验，对于没有那<br>么⾼的对象模型要求的项⽬来说，相当完美。 2、sql<br>写在xml⾥，便于统⼀管理和优化， 解除sql与程序代<br>码的耦合。 3、提供映射标签，⽀持对象与数据库的<br>orm字段关系映射 4、 提供对象关系映射标签，⽀持对<br>象关系组建维护 5、提供xml标签，⽀持编写动态sql。 6、速度相对于Hibernate的速度较快<br>Hibernate 缺点 MyBatis 缺点<br>1、学习⻔槛⾼，精通⻔槛更⾼，程序员如何设计<br>O/R映射，在性能和对象模型之间如何取得平衡，<br>以及怎样⽤好Hibernate⽅⾯需要的经验和能⼒都<br>很强才⾏ 2、hibernate的sql很多都是⾃动⽣成<br>的，⽆法直接维护sql；虽然有hql查询，但功能还<br>是不及sql强⼤，⻅到报表等变态需求时，hql查询<br>要虚，也就是说hql查询是有局限的；hibernate<br>虽然也⽀持原⽣sql查询，但开发模式上却与orm<br>不同，需要转换思维，因此使⽤上有些不⽅便。<br>总之写sql的灵活度上hibernate不及mybatis。 1、关联表多时，字段多的时候，sql⼯作量很⼤。 2、<br>sql依赖于数据库，导致数据库移植性差。 3、由于xml<br>⾥标签id必须唯⼀，导致DAO中⽅法不⽀持⽅法重载。<br>4、对象关系映射标签和字段映射标签仅仅是对映射关<br>系的描述，具体实现仍然依赖于sql。 5、DAO层过于<br>简单，对象组装的⼯作量较⼤。 6、不⽀持级联更新、<br>级联删除。 7、Mybatis的⽇志除了基本记录功能外，<br>其它功能薄弱很多。 8、编写动态sql时,不⽅便调试，<br>尤其逻辑复杂时。 9、提供的写动态sql的xml标签功能<br>简单，编写动态sql仍然受限，且可读性低。<br>三、MyBatis的应⽤<br>1.Hibernate与MyBati之间的优点与缺点。<br>Hibernate是全⾃动的，MyBatis是半⾃动的，需要⼿动编写与维护SQL语句。<br>参考资料：Mybatis和Hibernate的区别、优缺点<br>ORM的持久化概念。<br>2.MyBatis的下载：<br>GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java<br>下载发⾏版的压缩包后解压，得到MyBatis的资源相关的⽂件夹。其中内容如上所示。<br>其中的mybatis-3.5.X.pdf就是帮助⽂档，其中的内容可以学习使⽤。<br>3.MyBatis的⼯作原理<br>4.MyBatis的应⽤案例<br>(1)根据客户的编号进⾏唯⼀结果的查询。<br>(2)根据客户的名称进⾏模糊查询。<br>创建名为mybatis的数据库，并在其中创建⼀个表，表名为t_customer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># create database mybatis;</span><br><span class="line">create database if not exists mybatis default charset=utf8mb4;</span><br><span class="line">use mybatis;</span><br><span class="line">show tables;</span><br><span class="line">create table if not exists t_customer(</span><br><span class="line"> id int(11) not null auto_increment,</span><br><span class="line"> username varchar(64),</span><br><span class="line"> jobs varchar(64),</span><br><span class="line"> phone varchar(11),</span><br><span class="line"> primary key (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="插⼊测试数据"><a href="#插⼊测试数据" class="headerlink" title="插⼊测试数据"></a>插⼊测试数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_customer values (110011,&quot;刘德华&quot;,&quot;歌⼿&quot;,&quot;13909311100&quot;),(110012,&quot;周星驰&quot;,&quot;演 员&quot;,&quot;13909311111&quot;);</span><br></pre></td></tr></table></figure>

<p>创建⼀个项⽬，在项⽬中的lib⽬录下复制以下的jar包。<br>commons-logging-1.2.jar<br>log4j-1.2.17.jar<br>log4j-api-2.17.0.jar<br>mybatis-3.5.9.jar<br>但是要访问MySQL数据库，还需要jdbc的驱动包。<br>mysql-connector-java-8.0.28.jar<br>将以上的jar包添加到项⽬中去。<br>构建项⽬的内容：<br>在classpath⽬录下分别创建mybatis的⽇志配置⽂件和核⼼配置⽂件</p>
<h1 id="Global-logging-configuration"><a href="#Global-logging-configuration" class="headerlink" title="Global logging configuration"></a>Global logging configuration</h1><p>log4j.rootLogger=ERROR,stdout</p>
<h1 id="MyBatis-logging-configuration"><a href="#MyBatis-logging-configuration" class="headerlink" title="MyBatis logging configuration"></a>MyBatis logging configuration</h1><p>log4j.logger.com.lz.xbmu=DEBUG</p>
<h1 id="Console-output…"><a href="#Console-output…" class="headerlink" title="Console output…"></a>Console output…</h1><p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line"> &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line"> &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line"> &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line"> &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt;</span><br><span class="line"> &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line"> &lt;property name=&quot;password&quot; value=&quot;mysqlroot&quot;/&gt;</span><br><span class="line"> &lt;/dataSource&gt;</span><br><span class="line"> &lt;/environment&gt;</span><br><span class="line"> &lt;/environments&gt;</span><br><span class="line"> &lt;mappers&gt;</span><br><span class="line"> &lt;mapper resource=&quot;com/lz/xbmu/mapper/CustomerMapper.xml&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>创建项⽬的基础包路径 com.lz.xbmu<br>并创建po包及类Customer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.po;</span><br><span class="line">public class Customer &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String username;</span><br><span class="line"> private String jobs;</span><br><span class="line"> private String phone; </span><br><span class="line"> @Override</span><br><span class="line"> public String toString() &#123;</span><br><span class="line"> return &quot;Customer [id=&quot; + id + &quot;, username=&quot; + username + &quot;, jobs=&quot; + jobs + &quot;, phone=&quot; +</span><br><span class="line">phone + &quot;]&quot;;</span><br><span class="line"> &#125;</span><br><span class="line"> //getter/setter⽅法略</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>在com.lz.xbmu.mapper包中创建映射⽂件CustomerMapper.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.CustomerMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findCustomerById&quot; parameterType=&quot;Integer&quot;</span><br><span class="line"> resultType=&quot;com.lz.xbmu.po.Customer&quot;&gt;</span><br><span class="line"> select * from t_customer where id = #&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>在com.lz.xbmu.test包中创建测试类<br>MyBatis的核⼼配置及映射⽂件<br>SqlSessionFactory核⼼对象的理解：<br>•SqlSessionFactory对象是线程安全的，它⼀旦被创建，在整个应⽤执⾏期间都会存在。如果我们多次的创建同⼀<br>个数据库的SqlSessionFactory，那么此数据库的资源将很容易被耗尽。为此，通常每⼀个数据库都会只对应⼀个<br>SqlSessionFactory，所以在构建SqlSessionFactory实例时，建议使⽤单列模式。<br>在使⽤SqlSession对象执⾏SQL语句时，要注意commit⽅法的使⽤情况。<br>MyBatisUtils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.test;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">public class MyBatisTest &#123;</span><br><span class="line"> public static void main(String[] args) throws IOException &#123;</span><br><span class="line"> //指定核⼼配置⽂件名称</span><br><span class="line"> String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line"> //将核⼼配置⽂件读取为流数据</span><br><span class="line"> InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line"> //创建SqlSession⼯⼚对象，使⽤读取的流及build⽅法</span><br><span class="line"> SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);</span><br><span class="line"> //创建SqlSession对象，⽤于执⾏⽬标语句</span><br><span class="line"> SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"> //查询并获取结果</span><br><span class="line"> Customer customer =</span><br><span class="line">sqlSession.selectOne(&quot;com.lz.xbmu.CustomerMapper.findCustomerById&quot;,100);</span><br><span class="line"> System.out.println(customer);</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.util;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">public class MyBatisUtils &#123;</span><br><span class="line"> private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"> static &#123;</span><br><span class="line"> try &#123;</span><br><span class="line"> InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br><span class="line"> sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line"> // TODO Auto-generated catch block</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //返回SqlSession对象</span><br><span class="line"> public static SqlSession getSession() &#123;</span><br><span class="line"> return sqlSessionFactory.openSession();</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>分别实现selectList,insert,delete等⽅法的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.test;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">import com.lz.xbmu.util.MyBatisUtils;</span><br><span class="line">public class MyBatisTest &#123;</span><br><span class="line"> </span><br><span class="line"> //@Test</span><br><span class="line"> public void selectOne() throws IOException &#123;</span><br><span class="line"> </span><br><span class="line"> String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line"> InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> </span><br><span class="line"> SqlSessionFactory sqlSessionFactory =</span><br><span class="line"> new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"> </span><br><span class="line"> SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"> Customer customer = sqlSession.selectOne(&quot;com.lz.xbmu.CustomerMapper.findCustomerById&quot;,1);</span><br><span class="line"> System.out.println(customer);</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //@Test</span><br><span class="line"> public void findAll() &#123;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> try &#123;</span><br><span class="line"> String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line"> InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> </span><br><span class="line"> SqlSessionFactory sqlSessionFactory =</span><br><span class="line"> new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"> </span><br><span class="line"> sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"> </span><br><span class="line"> List&lt;Customer&gt; customers = sqlSession.selectList(&quot;com.lz.xbmu.CustomerMapper.findAll&quot;);</span><br><span class="line"> for(Customer c : customers) System.out.println(c);</span><br><span class="line"> &#125;catch (Exception e) &#123;</span><br><span class="line"> // TODO: handle exception</span><br><span class="line"> System.out.println(e);</span><br><span class="line"> &#125;finally &#123;</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //插⼊新数据</span><br><span class="line"> //@Test</span><br><span class="line"> public void insertCustomer() &#123;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> try &#123;</span><br><span class="line"> String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line"> InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"> SqlSessionFactory sqlSessionFactory =</span><br><span class="line"> new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"> sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"> //创建要插⼊的顾客信息</span><br><span class="line"> Customer cust = new Customer();</span><br><span class="line"> cust.setUsername(&quot;刘欢&quot;);</span><br><span class="line"> cust.setJobs(&quot;歌⼿&quot;);</span><br><span class="line"> cust.setPhone(&quot;13919912345&quot;);</span><br><span class="line"> int result = sqlSession.insert(&quot;com.lz.xbmu.CustomerMapper.insertCust&quot;, cust);</span><br><span class="line"> System.out.println(&quot;插⼊数据后的结果:&quot;+result);</span><br><span class="line"> //默认把⾃动提交给关闭了，所以要⼿动提交</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> &#125;catch (Exception e) &#123;</span><br><span class="line"> // TODO: handle exception</span><br><span class="line"> System.out.println(e);</span><br><span class="line"> &#125;finally &#123;</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //删除数据</span><br><span class="line"> @Test</span><br><span class="line"> public void deleteCustomer() &#123;</span><br><span class="line"> SqlSession sqlSession = null;</span><br><span class="line"> try &#123;</span><br><span class="line"> sqlSession = MyBatisUtils.getSession();</span><br><span class="line"> //删除指定id的顾客信息</span><br><span class="line"> int result = sqlSession.delete(&quot;com.lz.xbmu.CustomerMapper.deleteById&quot;, 110017);</span><br><span class="line"> sqlSession.commit();</span><br><span class="line"> &#125;catch (Exception e) &#123;</span><br><span class="line"> // TODO: handle exception</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;finally &#123;</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>核⼼配置⽂件：建议参考帮助⽂档中的内容。<br>typeHandlers<br>objectFactory<br>plugins<br>以上三个配置元素了解即可。<br>元素⽤于对环境进⾏配置。MyBatis的环境配置实际上就是数据源的配置，我们可以通过元素配置多种数据源，即<br>配置多种数据库。<br>其它的配置，请参考帮助⽂档。<br>映射⽂件的配置：<br>CustomerMapper.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.CustomerMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findCustomerById&quot; parameterType=&quot;Integer&quot;</span><br><span class="line"> resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer where id = #&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;select id=&quot;findAll&quot; resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;update id=&quot;updateCustomer&quot; parameterType=&quot;customer&quot;&gt;</span><br><span class="line"> update t_customer set username=#&#123;username&#125;,jobs=#&#123;jobs&#125;,phone=#&#123;phone&#125; where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>动态SQL<br>if的使⽤<br>当使⽤综合条件查询时，⽆法确定条件是否都存在或是可⽤，就需要if来判断条件是否可⽤。<br>choose、when、otherwise<br>当多个条件都可⽤时，依次按条件出现的顺序选择第⼀个可⽤的条件进⾏查询。如果所有条件均不满⾜，则使⽤<br>otherwise中的条件进⾏查询。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/update&gt;</span><br><span class="line"> &lt;!-- 添加记录 --&gt;</span><br><span class="line"> &lt;insert id=&quot;insertCustomer&quot; parameterType=&quot;customer&quot;</span><br><span class="line"> useGeneratedKeys=&quot;true&quot; keyColumn=&quot;id&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line"> &lt;selectKey&gt;&lt;/selectKey&gt;</span><br><span class="line"> insert into t_customer values (#&#123;id&#125;,#&#123;username&#125;,#&#123;jobs&#125;,#&#123;phone&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"> &lt;select id=&quot;findCustomerByNameAndJobs&quot; parameterType=&quot;map&quot;</span><br><span class="line"> resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer where 1=1</span><br><span class="line"> &lt;if test=&quot;name != null and name != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> and username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;jobs != null and jobs != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> and jobs=#&#123;jobs&#125;</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void findCustomerByNameAndJobs() &#123;</span><br><span class="line">SqlSession sqlSession = MyBatisUtils.getSession();</span><br><span class="line">Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;name&quot;, &quot;t&quot;);</span><br><span class="line">map.put(&quot;jobs&quot;,&quot;Farmer&quot;);</span><br><span class="line">List&lt;Customer&gt; custs = sqlSession</span><br><span class="line">.selectList(&quot;com.lz.xbmu.CustomerMapper.findCustomerByNameAndJobs&quot;,map);</span><br><span class="line">for(Customer c : custs) System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;select id=&quot;findCustomerByNameAndJobs&quot; parameterType=&quot;map&quot;</span><br><span class="line"> resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer where 1=1</span><br><span class="line"> &lt;choose&gt;</span><br><span class="line"> &lt;when test=&quot;name != null and name != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> and username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">trim、where、set</span><br></pre></td></tr></table></figure>


<p>⽤于处理较特殊的情况，例如去除where 1=1这种情况<br>会⾃动判断后⾯的条件是否成⽴，如果成⽴则添加where条件，并且⾃动处理and或or关键字。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;/when&gt;</span><br><span class="line">&lt;when test=&quot;jobs != null and jobs != &#x27;&#x27;&quot;&gt;</span><br><span class="line">and jobs=#&#123;jobs&#125;</span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;otherwise&gt;</span><br><span class="line">and phone is not null</span><br><span class="line">&lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"> public void findCustomerByNameAndJobs1() &#123;</span><br><span class="line"> SqlSession sqlSession = MyBatisUtils.getSession();</span><br><span class="line"> Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"> //map.put(&quot;name&quot;, &quot;t&quot;);</span><br><span class="line"> //map.put(&quot;jobs&quot;,&quot;Farmer&quot;);</span><br><span class="line"> List&lt;Customer&gt; custs = sqlSession</span><br><span class="line"> .selectList(&quot;com.lz.xbmu.CustomerMapper.findCustomerByNameAndJobs&quot;,map);</span><br><span class="line"> for(Customer c : custs) System.out.println(c);</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;select id=&quot;findCustomerByNameAndJobs1&quot; parameterType=&quot;map&quot;</span><br><span class="line"> resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer</span><br><span class="line"> &lt;where&gt;</span><br><span class="line"> &lt;if test=&quot;name != null and name != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> username like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;jobs != null and jobs != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> and jobs=#&#123;jobs&#125;</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;/where&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;update id=&quot;updateCustomer&quot; parameterType=&quot;customer&quot;&gt;</span><br><span class="line"> update t_customer</span><br><span class="line"> &lt;set&gt;</span><br><span class="line"> &lt;if test=&quot;username != null and username != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> username=#&#123;username&#125;,</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;jobs != null and jobs != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> jobs=#&#123;jobs&#125;,</span><br><span class="line">foreach</span><br><span class="line">当有多个相同条件的数据进⾏查询时，可以使⽤foreach进⾏批量查询</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;phone != null and phone != &#x27;&#x27;&quot;&gt;</span><br><span class="line"> phone=#&#123;phone&#125;</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;/set&gt;</span><br><span class="line"> where id=#&#123;id&#125;</span><br><span class="line"> &lt;/update&gt;</span><br><span class="line"> &lt;select id=&quot;findCustomerByIds&quot; parameterType=&quot;List&quot; resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer where id in</span><br><span class="line"> &lt;foreach collection=&quot;list&quot; item=&quot;id&quot;</span><br><span class="line"> open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #&#123;id&#125; &lt;/foreach&gt;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> @Test</span><br><span class="line"> public void findCustomerByIds() &#123;</span><br><span class="line"> SqlSession sqlSession = MyBatisUtils.getSession();</span><br><span class="line"> List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();</span><br><span class="line"> ids.add(21);</span><br><span class="line"> ids.add(110011);</span><br><span class="line"> ids.add(110012);</span><br><span class="line"> ids.add(110013);</span><br><span class="line"> ids.add(110014);</span><br><span class="line"> ids.add(110015);</span><br><span class="line"> ids.add(110016);</span><br><span class="line"> List&lt;Customer&gt; custs =</span><br><span class="line">sqlSession.selectList(&quot;com.lz.xbmu.CustomerMapper.findCustomerByIds&quot;,ids);</span><br><span class="line"> for(Customer c:custs) System.out.println(c);</span><br><span class="line"> sqlSession.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>bind<br>MyBatis关联映射<br>⼀对⼀关系<br>⾸先创建两个表，分别是身份证表tb_idcard，和⼈员信息表tb_person<br>项⽬的内容：<br>IdCard.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;findCustomerByName&quot; parameterType=&quot;customer&quot; resultType=&quot;customer&quot;&gt;</span><br><span class="line"> &lt;bind name=&quot;pattern_username&quot; value=&quot;&#x27;%&#x27;+_parameter.getUsername()+&#x27;%&#x27;&quot; /&gt;</span><br><span class="line"> select * from t_customer where username like #&#123;pattern_username&#125;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> @Test</span><br><span class="line"> public void findCUstomerByName() &#123;</span><br><span class="line"> SqlSession session = MyBatisUtils.getSession();</span><br><span class="line"> Customer cust = new Customer();</span><br><span class="line"> cust.setUsername(&quot;t&quot;);</span><br><span class="line"> List&lt;Customer&gt; custs = session</span><br><span class="line"> .selectList(&quot;com.lz.xbmu.mapper.CustomerMapper.findCustomerByName&quot;,cust);</span><br><span class="line"> for(Customer c:custs)System.out.println(c);</span><br><span class="line"> session.close();</span><br><span class="line"> &#125;</span><br><span class="line">public class IdCard &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String code;</span><br><span class="line">&#125;</span><br><span class="line">Person.java</span><br><span class="line">public class Person &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String name;</span><br><span class="line"> private Integer age;</span><br><span class="line"> private String sex;</span><br><span class="line"> private IdCard card;//个⼈关联的身份证</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IdCardMapper.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.IdCardMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findCodeById&quot; parameterType=&quot;Integer&quot;</span><br><span class="line"> resultType=&quot;IdCard&quot;&gt;</span><br><span class="line"> select * from tb_idcard where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">PersonMapper.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.PersonMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findPersonById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;person&quot;&gt;</span><br><span class="line"> select * from tb_person where id=#&#123;id&#125; </span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">使⽤嵌套查询时的映射⽂件</span><br><span class="line"> &lt;!-- 嵌套查询 --&gt;</span><br><span class="line"> &lt;select id=&quot;findPersonById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;IdCardWithPersonMap&quot;&gt;</span><br><span class="line"> select * from tb_person where id=#&#123;id&#125; </span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;Person&quot; id=&quot;IdCardWithPersonMap&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;</span><br><span class="line"> &lt;!-- ⼀对⼀的映射关系 --&gt;</span><br><span class="line"> &lt;association property=&quot;card&quot; column=&quot;card_id&quot;</span><br><span class="line"> javaType=&quot;IdCard&quot;</span><br><span class="line"> select=&quot;com.lz.xbmu.IdCardMapper.findCodeById&quot;&gt;&lt;/association&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line">嵌套结果</span><br><span class="line"> &lt;!-- 嵌套结果 --&gt;</span><br><span class="line"> &lt;select id=&quot;findPersonById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;IdCardWithPersonResult&quot;&gt;</span><br><span class="line"> select * from tb_person p,tb_idcard i where p.id=#&#123;id&#125; and p.card_id=i.id</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;person&quot; id=&quot;IdCardWithPersonResult&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;</span><br><span class="line"> &lt;!-- ⼀对⼀的映射关系 --&gt;</span><br><span class="line"> &lt;association property=&quot;card&quot; javaType=&quot;IdCard&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;card_id&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line"> &lt;/association&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.test;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.lz.xbmu.po.Person;</span><br><span class="line">import com.lz.xbmu.util.MyBatisUtils;</span><br><span class="line">public class PersonCardTest &#123;</span><br><span class="line"> </span><br><span class="line"> @Test</span><br><span class="line"> public void findPersonById() &#123;</span><br><span class="line">⼀对多关系</span><br><span class="line">tb_user</span><br><span class="line">tb_orders</span><br><span class="line">User.java</span><br><span class="line">Orders.java</span><br><span class="line">嵌套查询</span><br><span class="line"> SqlSession session = MyBatisUtils.getSession();</span><br><span class="line"> Person person = session.selectOne(&quot;com.lz.xbmu.PersonMapper.findPersonById&quot;,1);</span><br><span class="line"> System.out.println(person);</span><br><span class="line"> session.close();</span><br><span class="line"> &#125; &#125;</span><br><span class="line">public class User &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String username;</span><br><span class="line"> private String address;</span><br><span class="line"> private List&lt;Orders&gt; orderList;//⽤户关联的订单</span><br><span class="line">&#125;</span><br><span class="line">public class Orders &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String number;//订单编号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试程序代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.OrdersMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;Orders&quot;&gt;</span><br><span class="line"> select * from tb_orders where user_id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.UserMapper&quot;&gt;</span><br><span class="line"> &lt;!-- ⼀对多关系映射 --&gt;</span><br><span class="line"> &lt;select id=&quot;findUserWithOrders&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;UserWithOrdersMap&quot;&gt;</span><br><span class="line"> select * from tb_user where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;user&quot; id=&quot;UserWithOrdersMap&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;address&quot; column=&quot;address&quot; /&gt;</span><br><span class="line"> &lt;collection property=&quot;orderList&quot; column=&quot;id&quot;</span><br><span class="line"> ofType=&quot;Orders&quot;</span><br><span class="line"> select=&quot;com.lz.xbmu.OrdersMapper.findOrdersById&quot;&gt;&lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">嵌套结果</span><br><span class="line"> &lt;!-- ⼀对多关系映射 --&gt;</span><br><span class="line"> &lt;!-- 嵌套结果 --&gt;</span><br><span class="line"> &lt;select id=&quot;findUserWithOrders&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;UserWithOrdersResult&quot;&gt;</span><br><span class="line"> select u.*,o.id as orders_id,o.number</span><br><span class="line"> from tb_user u, tb_orders o</span><br><span class="line"> where u.id=#&#123;id&#125; and u.id=o.user_id</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;user&quot; id=&quot;UserWithOrdersResult&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;username&quot; column=&quot;username&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;address&quot; column=&quot;address&quot; /&gt;</span><br><span class="line"> &lt;collection property=&quot;orderList&quot; ofType=&quot;Orders&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;orders_id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;number&quot; column=&quot;number&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>多对多关系<br>tb_product<br>tb_ordersitem<br>tb_ordersitem<br>⾸先在数据中分析清楚多对多的关系<br>分步查询<br>select * from tb_orders where id=1;<br>select * from tb_ordersitem where orders_id=1;<br>select * from tb_product where id in (1,2);<br>综合查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select o.id,o.number,o.user_id,p.name,p.price from tb_orders o,tb_product p,tb_ordersitem i where</span><br><span class="line">o.id=i.orders_id and p.id=i.product_id;</span><br><span class="line"> &lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.po;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class Product &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String name;</span><br><span class="line"> private Double price;</span><br><span class="line"> private List&lt;Orders&gt; orders;//与订单关联的属性</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">public class Orders &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String number;//订单编号</span><br><span class="line"> private List&lt;Product&gt; productList;//关联商品集合信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多对多嵌套查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.OrdersMapper&quot;&gt;</span><br><span class="line"> &lt;!-- 多对多嵌套查询 --&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersWithProduct&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;findOrdersWithProductMap&quot;&gt;</span><br><span class="line"> select * from tb_orders where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;orders&quot; id=&quot;findOrdersWithProductMap&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;number&quot; column=&quot;number&quot; /&gt;</span><br><span class="line"> &lt;collection property=&quot;productList&quot; column=&quot;id&quot;</span><br><span class="line"> ofType=&quot;Product&quot;</span><br><span class="line"> select=&quot;com.lz.xbmu.ProductMapper.findProductByOrdersId&quot;&gt;&lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;Orders&quot;&gt;</span><br><span class="line"> select * from tb_orders where user_id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.ProductMapper&quot;&gt;</span><br><span class="line"> &lt;!-- 根据订单id来查找相关的产品 --&gt;</span><br><span class="line"> &lt;select id=&quot;findProductByOrdersId&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;product&quot;&gt;</span><br><span class="line"> select * from tb_product</span><br><span class="line"> where id in</span><br><span class="line"> (select product_id from tb_ordersitem where orders_id=#&#123;id&#125;);</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;!-- 根据产品id查找产品 --&gt;</span><br><span class="line"> &lt;select id=&quot;findProductById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;product&quot;&gt;</span><br><span class="line"> select * from tb_product where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.test;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.lz.xbmu.po.Orders;</span><br><span class="line">import com.lz.xbmu.util.MyBatisUtils;</span><br><span class="line">public class OrdersProductTest &#123;</span><br><span class="line"> @Test</span><br><span class="line"> public void findOrdersWithProduct() &#123;</span><br><span class="line"> SqlSession session = MyBatisUtils.getSession();</span><br><span class="line"> Orders orders = session.selectOne(&quot;com.lz.xbmu.OrdersMapper.findOrdersWithProduct&quot;,1);</span><br><span class="line"> System.out.println(orders);</span><br><span class="line"> session.close();</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>多对多的嵌套结果查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.OrdersMapper&quot;&gt;</span><br><span class="line"> &lt;!-- 多对多嵌套结果 --&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersWithProduct&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;findOrdersWithProductResult&quot;&gt;</span><br><span class="line"> select o.id,o.number,p.id as product_id,p.name,p.price</span><br><span class="line"> from tb_orders o,tb_product p,tb_ordersitem i</span><br></pre></td></tr></table></figure>

<p>四、Spring整合Mybatis<br>1.搭建环境<br>框架的整合过程，就是将Spring及MyBatis的包导⼊到项⽬中，并且还需要将⼀个专⻔的包导⼊。这个专⻔的包就<br>是⽤于整合Spring及MyBatis的包，因为Spring的发布要先于或是快于MyBatis的版本，所以这个包⼀般情况下是<br>由MyBatis来提供的。<br>⼀般情况下的名称为mybatis-spring.xxxx.jar这个样式的jar包。<br>Spring框架中⽤到的包有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where o.id=i.orders_id and p.id=i.product_id and o.id=#&#123;id&#125;;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;orders&quot; id=&quot;findOrdersWithProductResult&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;number&quot; column=&quot;number&quot; /&gt;</span><br><span class="line"> &lt;collection property=&quot;productList&quot; ofType=&quot;Product&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;product_id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line"> &lt;result property=&quot;price&quot; column=&quot;price&quot;/&gt;</span><br><span class="line"> &lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line"> &lt;!-- 多对多嵌套查询 --&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersWithProduct1&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultMap=&quot;findOrdersWithProductMap&quot;&gt;</span><br><span class="line"> select * from tb_orders where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;orders&quot; id=&quot;findOrdersWithProductMap&quot;&gt;</span><br><span class="line"> &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line"> &lt;result property=&quot;number&quot; column=&quot;number&quot; /&gt;</span><br><span class="line"> &lt;collection property=&quot;productList&quot; column=&quot;id&quot;</span><br><span class="line"> ofType=&quot;Product&quot;</span><br><span class="line"> select=&quot;com.lz.xbmu.ProductMapper.findProductByOrdersId&quot;&gt;&lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br><span class="line"> &lt;select id=&quot;findOrdersById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;Orders&quot;&gt;</span><br><span class="line"> select * from tb_orders where user_id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>spring-aop-5.2.19.RELEASE.jar<br>spring-aspects-5.2.19.RELEASE.jar<br>spring-beans-5.2.19.RELEASE.jar<br>spring-context-5.2.19.RELEASE.jar<br>spring-core-5.2.19.RELEASE.jar<br>spring-expression-5.2.19.RELEASE.jar<br>spring-jdbc-5.2.19.RELEASE.jar<br>spring-tx-5.2.19.RELEASE.jar<br>因为spring的aop使⽤了外部的框架技术，所以还要导⼊aspectjweaver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;1.9.8&lt;/version&gt;</span><br><span class="line"> &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>MyBatis框架中⽤到的包有：<br>commons-logging-1.2.jar<br>log4j-1.2.17.jar<br>log4j-api-2.17.0.jar<br>mybatis-3.5.9.jar<br>Spring整合MyBatis的包：<br>该包可以去Please Wait… | Cloudflare (mvnrepository.com)这个⽹站下载<br>使⽤maven管理项⽬的可以参考:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;2.0.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>mybatis-spring-2.0.7.jar<br>数据库的驱动包<br>mysql-connector-java-8.0.28.jar<br>数据源及数据连接池相关包<br>可以到Apache⽹站下载：Welcome to The Apache Software Foundation!<br>commons-dbcp2-2.9.0.jar<br>commons-pool2-2.11.1.jar<br>到这⾥就完成了所包的导⼊⼯作。<br>这⾥只是对Spring和MyBatis进⾏整合，并不涉及SpringMVC技术，所以没有导⼊SpringMVC相关的包。<br>将以上的包添加到开发环境的路径中去。<br>2.编写配置⽂件<br>在类的根路径下创建db.properties⽂件，并配置如下内容。<br>db.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">applicationContext.xml</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=mysqlroot</span><br><span class="line">jdbc.maxTotal=20</span><br><span class="line">jdbc.maxIdle=10</span><br><span class="line">jdbc.initialSize=5</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"> xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/context</span><br><span class="line"> https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line"> http://www.springframework.org/schema/tx</span><br><span class="line"> https://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- 读取数据配置⽂件 db.properties --&gt;</span><br><span class="line"> &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class="line"> &lt;!-- 配置数据源 --&gt;</span><br><span class="line"> &lt;bean id=&quot;dataSource&quot;</span><br><span class="line"> class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line"> &lt;!-- 数据库驱动 --&gt;</span><br><span class="line"> &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line"> &lt;!-- 连接数据库url --&gt;</span><br><span class="line"> &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 数据库访问名称 --&gt;</span><br><span class="line"> &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 数据库访问密码 --&gt;</span><br><span class="line"> &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 最⼤连接数 --&gt;</span><br><span class="line"> &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;jdbc.maxTotal&#125;&quot;/&gt;</span><br><span class="line"> &lt;!-- 最⼤空闲数 --&gt;</span><br><span class="line"> &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;jdbc.maxIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 初始化连接数 --&gt;</span><br><span class="line"> &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initialSize&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!-- 事务管理器，依赖于数据源 --&gt;</span><br><span class="line"> &lt;bean id=&quot;transactionManager&quot;</span><br><span class="line"> class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!-- 开启事务注解 --&gt;</span><br><span class="line"> &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</span><br><span class="line"> &lt;!-- 配置MyBatis⼯⼚ --&gt;</span><br><span class="line"> &lt;bean id=&quot;sqlSessionFactory&quot;</span><br><span class="line"> class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line"> &lt;!-- 注⼊数据源 --&gt;</span><br><span class="line"> &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 指定核⼼配置⽂件的位置 --&gt;</span><br><span class="line"> &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!-- Mapper代理开发（基于MapperFactoryBean） --&gt;</span><br><span class="line"> &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;basePackage&quot; value=&quot;com.lz.xbmu.mapper&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>mybatis-config.xml<br>log4j.properties<br>3.使⽤Mapper的⽅式开发<br>这⾥需要在Sprng的配置⽂件中进⾏修改，来实现通过mapper的定义接⼝来调⽤相关的⽅法。<br>4.事务及分层</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;!-- 配置别名 --&gt;</span><br><span class="line"> &lt;typeAliases&gt;</span><br><span class="line"> &lt;package name=&quot;com.lz.xbmu.po&quot;/&gt;</span><br><span class="line"> &lt;/typeAliases&gt;</span><br><span class="line"> &lt;mappers&gt;</span><br><span class="line"> &lt;mapper resource=&quot;com/lz/xbmu/mapper/CustomerMapper.xml&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=ERROR, stdout</span><br><span class="line">log4j.logger.com.lz.xbmu=DEBUG</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Mapper代理开发 --&gt;</span><br><span class="line"> &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;basePackage&quot; value=&quot;com.lz.xbmu.mapper&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">当使⽤了代理模式后，mybatis-config.xml</span><br><span class="line">可以修改为包扫描的⽅式。</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;!-- 配置别名 --&gt;</span><br><span class="line"> &lt;typeAliases&gt;</span><br><span class="line"> &lt;package name=&quot;com.lz.xbmu.po&quot;/&gt;</span><br><span class="line"> &lt;/typeAliases&gt;</span><br><span class="line"> &lt;mappers&gt;</span><br><span class="line"> &lt;!-- &lt;mapper resource=&quot;com/lz/xbmu/mapper/CustomerMapper.xml&quot;/&gt; --&gt;</span><br><span class="line"> &lt;package name=&quot;com.lz.xbmu.mapper&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>应⽤案例全过程：<br>1.创建Customer.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.lz.xbmu.po</span><br><span class="line">public class Customer &#123;</span><br><span class="line"> private Integer id;</span><br><span class="line"> private String username;</span><br><span class="line"> private String jobs;</span><br><span class="line"> private String phone;</span><br><span class="line"> //getter setter⽅法略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.lz.xbmu.mapper.CustomerMapper.java</span><br><span class="line">package com.lz.xbmu.mapper;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">public interface CustomerMapper &#123;</span><br><span class="line"> public Customer findCustomerById(int id);</span><br><span class="line"> public int addCustomer(Customer cust);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>com.lz.xbmu.mapper.CustomerMapper.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line"> &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.lz.xbmu.mapper.CustomerMapper&quot;&gt;</span><br><span class="line"> &lt;select id=&quot;findCustomerById&quot; parameterType=&quot;int&quot;</span><br><span class="line"> resultType=&quot;customer&quot;&gt;</span><br><span class="line"> select * from t_customer where id = #&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;insert id=&quot;addCustomer&quot; parameterType=&quot;customer&quot;&gt;</span><br><span class="line"> insert into t_customer values (null,#&#123;username&#125;,#&#123;jobs&#125;,#&#123;phone&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>com.lz.xbmu.service.CustomerService</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.service;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">public interface CustomerService &#123;</span><br><span class="line"> public Customer findCustomerById(int id);</span><br><span class="line"> public int addCustomer(Customer cust);</span><br><span class="line">&#125;</span><br><span class="line">com.lz.xbmu.service.impl.CustomerServiceImpl</span><br><span class="line">package com.lz.xbmu.service.impl;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import com.lz.xbmu.mapper.CustomerMapper;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">import com.lz.xbmu.service.CustomerService;</span><br><span class="line">@Service</span><br><span class="line">public class CustomerServiceImpl implements CustomerService &#123;</span><br><span class="line"> @Autowired</span><br><span class="line"> private CustomerMapper customerMapper;</span><br><span class="line"> </span><br><span class="line"> @Override</span><br><span class="line"> public Customer findCustomerById(int id) &#123;</span><br><span class="line"> // TODO Auto-generated method stub</span><br><span class="line"> return this.customerMapper.findCustomerById(id);</span><br><span class="line"> &#125;</span><br><span class="line"> @Override</span><br><span class="line"> public int addCustomer(Customer cust) &#123;</span><br><span class="line"> // TODO Auto-generated method stub</span><br><span class="line"> return this.customerMapper.addCustomer(cust);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>com.lz.xbmu.controller.CustomerController</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.controller;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import com.lz.xbmu.po.Customer;</span><br><span class="line">import com.lz.xbmu.service.CustomerService;</span><br><span class="line">@Controller</span><br><span class="line">public class CustomerController &#123;</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line"> ApplicationContext cxt = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"> CustomerService cs = cxt.getBean(CustomerService.class);</span><br><span class="line">// Customer cust = cs.findCustomerById(110020);</span><br><span class="line">// System.out.println(cust);</span><br><span class="line"> Customer cust = new Customer();</span><br><span class="line"> cust.setUsername(&quot;Test02&quot;);</span><br><span class="line"> cust.setJobs(&quot;test02&quot;);</span><br><span class="line"> cust.setPhone(&quot;test02&quot;);</span><br><span class="line"> int result = cs.addCustomer(cust);</span><br><span class="line"> System.out.println(result);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>项⽬案例的结构图：<br>五、SpringMVC⽂件上传与下载<br>1.新建项⽬Dynamic Web Project<br>选择新建项⽬类型为Dynamic Web Project<br>指定相关的项⽬参数<br>2.导⼊相关的包<br>将以下的jar包拷⻉到项⽬中WEB-INF⽬录下的lib⽬录下<br>commons-fileupload-1.4.jar<br>commons-io-2.11.0.jar<br>commons-logging-1.2.jar<br>javax.servlet-api-3.1.0.jar<br>spring-aop-5.2.19.RELEASE.jar<br>spring-beans-5.2.9.RELEASE.jar<br>spring-context-5.2.9.RELEASE.jar<br>spring-core-5.2.9.RELEASE.jar<br>spring-expression-5.2.9.RELEASE.jar<br>spring-web-5.2.19.RELEASE.jar<br>spring-webmvc-5.2.19.RELEASE.jar<br>将以上的包添加到环境变量中<br>3.创建⽂件上传⻚⾯<br>在webapp⽬录下创建jsp⻚⾯<br>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8”<br> pageEncoding=”UTF-8”%&gt;<br><!DOCTYPE html><br>4.新建配置⽂件并进⾏配置<br>web.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt; &lt;body&gt; &lt;div style=&quot;margin: auto;border: #000000 1px solid; width: 400px; height: 220px;&quot;&gt; &lt;h3&gt;图⽚上传&lt;/h3&gt; &lt;form action=&quot;/fileUpload&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt; &lt;label&gt;上传者名称&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;uploadfile&quot; multiple=&quot;multiple&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line"> id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt;</span><br><span class="line"> &lt;display-name&gt;FileUploadDemo02&lt;/display-name&gt;</span><br><span class="line"> &lt;servlet&gt;</span><br><span class="line"> &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line"> &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line"> &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line"> &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line"> xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">5.编写代码controller</span><br><span class="line"> xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"> xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line"> xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line"> https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line"> http://www.springframework.org/schema/context</span><br><span class="line"> https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line"> http://www.springframework.org/schema/mvc</span><br><span class="line"> https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line"> &lt;!-- 启⽤注解的⽅式 --&gt;</span><br><span class="line"> &lt;context:annotation-config /&gt;</span><br><span class="line"> &lt;!-- 使⽤包扫描的⽅式 --&gt;</span><br><span class="line"> &lt;context:component-scan</span><br><span class="line"> base-package=&quot;com.lz.xbmu.controller&quot; /&gt;</span><br><span class="line"> &lt;!-- 配置视图解析器 --&gt;</span><br><span class="line"> &lt;bean id=&quot;viewResolver&quot;</span><br><span class="line"> class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line"> &lt;!-- 前缀 --&gt;</span><br><span class="line"> &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;!-- 后缀 --&gt;</span><br><span class="line"> &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!-- mvc的注解驱动 --&gt;</span><br><span class="line"> &lt;mvc:annotation-driven /&gt;</span><br><span class="line"> &lt;!-- 配置⽂件上传解析器 MultipartResolver --&gt;</span><br><span class="line"> &lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line"> class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line"> &lt;!-- 设置请求编码格式 --&gt;</span><br><span class="line"> &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;property name=&quot;maxUploadSize&quot; value=&quot;2097152&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>package com.lz.xbmu.controller;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.UUID;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">@Controller</span><br><span class="line">public class BookPictureController &#123;</span><br><span class="line"> @PostMapping(&quot;/fileUpload&quot;)</span><br><span class="line"> public ModelAndView fileUpload(@RequestParam(&quot;name&quot;) String name,</span><br><span class="line"> @RequestParam(&quot;file&quot;) List&lt;MultipartFile&gt; uploadfile,</span><br><span class="line"> HttpServletRequest request,ModelAndView mav) &#123;</span><br><span class="line"> System.out.println(&quot;name=&quot;+name);</span><br><span class="line"> System.out.println(&quot;file=&quot;+uploadfile);</span><br><span class="line"> //判断⽂件是否为空</span><br><span class="line"> if (!uploadfile.isEmpty() &amp;&amp; uploadfile.size() &gt; 0) &#123;</span><br><span class="line"> //循环输出上传⽂件</span><br><span class="line"> for (MultipartFile file : uploadfile) &#123;</span><br><span class="line"> //获取⽂件名</span><br><span class="line"> String originalFilename = file.getOriginalFilename();</span><br><span class="line"> //设置上传⽂件的保存地址⽬录</span><br><span class="line"> String dirPath = request.getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line"> File filePath = new File(dirPath);</span><br><span class="line"> //如果保存⽂件⽬录不存在，就创建</span><br><span class="line"> if(!filePath.exists()) &#123;</span><br><span class="line"> filePath.mkdirs();</span><br><span class="line"> &#125;</span><br><span class="line"> //给上传的⽂件重新命名</span><br><span class="line"> String newFilename = name + &quot;_&quot; + UUID.randomUUID() + &quot;_&quot; + originalFilename;</span><br><span class="line"> try &#123;</span><br><span class="line"> //使⽤MultipartFile接⼝中的⽅法完成⽂件的上传</span><br><span class="line"> file.transferTo(new File(dirPath + newFilename));</span><br><span class="line"> &#125; catch (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> mav.setViewName(&quot;error&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> //这⾥演示的是将⼀张图⽚名保存</span><br><span class="line"> mav.addObject(&quot;info&quot;,newFilename);</span><br><span class="line"> &#125;</span><br><span class="line"> mav.setViewName(&quot;success&quot;);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> mav.setViewName(&quot;error&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> return mav;</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>⽂件下载的实现（防⽌中⽂乱码，进⾏统⼀编码）<br>下载⻚⾯的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line"> pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.net.URLEncoder&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt; &lt;body&gt; &lt;h2&gt;⽂件下载应⽤&lt;/h2&gt; &lt;a href=&quot;$&#123;pageContext.request.contextPath &#125;/downloadfile?filename=&lt;%=URLEncoder.encode(&quot;宇航</span><br><span class="line">员.jpeg&quot;,&quot;UTF-8&quot;) %&gt;&quot;&gt;</span><br><span class="line">下载⽂件</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>请求处理的Controller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.lz.xbmu.controller;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">@Controller</span><br><span class="line">public class FileDownloadController &#123;</span><br><span class="line"> @RequestMapping(&quot;/downloadfile&quot;)</span><br><span class="line"> public ResponseEntity&lt;byte[]&gt; fileDownload(String filename,HttpServletRequest request)</span><br><span class="line"> throws IOException&#123;</span><br><span class="line"> //指定要下载的⽂件的路径</span><br><span class="line"> String path = request.getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line"> //创建下载⽂件对象</span><br><span class="line"> File file = new File(path + File.separator + filename);</span><br><span class="line"> //对⽂件名编码，防⽌中⽂乱码</span><br><span class="line"> filename = this.getFilename(request,filename);</span><br><span class="line"> //设置响应头</span><br><span class="line"> HttpHeaders headers = new HttpHeaders();</span><br><span class="line"> headers.setContentDispositionFormData(&quot;attachment&quot;, filename);</span><br><span class="line"> //定义以流的形式下载返回⽂件数据</span><br><span class="line"> headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line"> //使⽤SpringMVC框架的对象封装返回下载的数据</span><br><span class="line"> return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file),</span><br><span class="line"> headers,HttpStatus.OK);</span><br><span class="line"> &#125;</span><br><span class="line"> private String getFilename(HttpServletRequest request, String filename)</span><br><span class="line"> throws UnsupportedEncodingException &#123;</span><br><span class="line"> //根据不同浏览器来判断</span><br><span class="line"> String[] IEBrowserKeyWords = &#123;&quot;MSIE&quot;,&quot;Trident&quot;,&quot;Edge&quot;&#125;;</span><br><span class="line"> //获取请求头代理信息</span><br><span class="line"> String userAgent = request.getHeader(&quot;User-Agent&quot;);</span><br><span class="line"> for (String keyWord : IEBrowserKeyWords) &#123;</span><br><span class="line"> if(userAgent.contains(keyWord)) &#123;</span><br><span class="line"> //进⾏统⼀编码</span><br><span class="line"> return URLEncoder.encode(filename,&quot;UTF-8&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //其它的浏览器统⼀为ISO-8859-1编码显示</span><br><span class="line"> return new String(filename.getBytes(&quot;UTF-8&quot;),&quot;ISO-8859-1&quot;);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>使用hexo+github搭建博客</title>
    <url>/2021/10/18/hexo-github-BuildBlog/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/10/18/1ZNFHxdQXjbo4Mi.jpg" alt="about-bg.jpg"></p>
<span id="more"></span>

<p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h3 id="Hexo和Jekyll的区别"><a href="#Hexo和Jekyll的区别" class="headerlink" title="Hexo和Jekyll的区别"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p>
<p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p>
<p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p>
<p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p>
<img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" width="850" height="400" div align="right">

<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>测试安装是否成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p>
<p>输入：(显示版本行)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<img src="https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg" width="850" height="400" div align="right">

<p>即安装成功；</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p><b>从一般开发者的角度来看，git有以下功能：</b><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p>
<p>打开官网下载链接：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (选择windows版本即可)</p>
<img src="https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg" width="850" height="400" div align="right">


<p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p>
<img src="https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg" width="850" height="400" div align="right">

<p>测试是否安装成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure>
<p>显示结果:</p>
<img src="https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg" width="850" height="400" div align="right">


<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）"><a href="#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）" class="headerlink" title="在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后按四次【enter】即可，生成后如下图：</p>
<img src="https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg" width="850" height="400" div align="right">

<h3 id="打开Github-点击头像–-gt-【setting】"><a href="#打开Github-点击头像–-gt-【setting】" class="headerlink" title="打开Github,点击头像–&gt;【setting】"></a>打开Github,点击头像–&gt;【setting】</h3><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width="850" height="400" div align="right">

<h3 id="点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】"><a href="#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】" class="headerlink" title="点击【SSH and GPG keys】–&gt;【New SSH key】"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><img src="https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg" width="850" height="400" div align="right">

<h3 id="输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；"><a href="#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；" class="headerlink" title="输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:/用户/用户名/.ssh/id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><img src="https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg" width="850" height="300" div align="right">

<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg" width="850" height="300" div align="right">

<p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init 你的博客名</span><br></pre></td></tr></table></figure>

<h3 id="在博客目录中安装依赖"><a href="#在博客目录中安装依赖" class="headerlink" title="在博客目录中安装依赖"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 博客名</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>安装完成之后进行测试，窗口中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p 5555</span><br></pre></td></tr></table></figure>
<p>在浏览器上输入 localhost:5555</p>
<img src="https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg" width="850" height="300" div align="right">

<h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p>
<img src="https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg" width="850" height="300" div align="right">

<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>打开Sublime 直接将博客目录拖进Sublime即可；</p>
<img src="https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg" width="850" height="400" div align="right">

<h3 id="hexo发布到Github"><a href="#hexo发布到Github" class="headerlink" title="hexo发布到Github"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）</p>
<img src="https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg" width="850" height="200" div align="right">

<p>打开Github网页点击【Your repositories】 最后复制链接</p>
<img src="https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg" width="850" height="450" div align="right">

<img src="https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg" width="850" height="300" div align="right">

<img src="https://i.loli.net/2021/10/20/Sn8IUm5Tsq6dDcg.jpg" width="850" height="350" div align="right">

<p>在_config.yml文件最后一行添加repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo: </span><br></pre></td></tr></table></figure>
<p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p>
<p>在最后一行添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">branch: main</span><br></pre></td></tr></table></figure>
<p>type后添加git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br></pre></td></tr></table></figure>

<p>如下图<br><img src="https://i.loli.net/2021/10/21/b4Px7pFjTvI5ea2.jpg" width="850" height="200" div align="right"></p>
<p>在博客根目录下添加插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="获取个人访问令牌"><a href="#获取个人访问令牌" class="headerlink" title="获取个人访问令牌"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p>
<p>在个人设置页面，找到 Settings<br><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width="850" height="400" div align="right"><br>找到 Developer settings<br><img src="https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg" width="850" height="350" div align="right"><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src="https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg" width="850" height="350" div align="right"><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src="https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg" width="850" height="350" div align="right"><br>如下为生成的令牌<br><img src="https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg" width="850" height="350" div align="right"></p>
<p><font color="RED">注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font></p>
<p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p>
<p>添加到如下图位置：（使用“@”和后面内容隔开）</p>
<img src="https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg" width="850" height="200" div align="right">

<h3 id="git中设置你的用户名和邮件名"><a href="#git中设置你的用户名和邮件名" class="headerlink" title="git中设置你的用户名和邮件名"></a>git中设置你的用户名和邮件名</h3><p> 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>打开你的浏览器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://博客名.github.io</span><br></pre></td></tr></table></figure>
<p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>hexo主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg" width="850" height="400" div align="right"></p>
<p>找到你喜欢的主题，例如next主题 点击【next】<br><img src="https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg" width="850" height="400" div align="right"></p>
<p>按照文件中所说下载和修改即可<br><img src="https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg" width="850" height="400" div align="right"></p>
<p>在博客根目录中打开【Git Bash Here】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-themes-next</span><br></pre></td></tr></table></figure>
<p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h3 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-relevant</title>
    <url>/2021/10/22/hexo-relevant/</url>
    <content><![CDATA[<img src="https://i.loli.net/2021/10/25/IQbfDr4LFY6hgl3.jpg" align="center" width="800" height="250" div>
<span id="more"></span>


<p>修改博客内容整体上边界<br>目录：[simon-yian]–&gt;[themes]–&gt;[next]–&gt;[source]–&gt;[css]–&gt;[_common]–&gt;[scaffolding]–&gt;[normalize.styl]</p>
<p>第十八行<br>/**</p>
<ul>
<li>Remove the margin in all browsers.</li>
<li>/<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> body &#123;</span><br><span class="line">  margin: 40px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>makedown进阶（改变字体颜色，大小，设置文字背景，调整图片大小设置剧中）</title>
    <url>/2021/10/18/picture/</url>
    <content><![CDATA[<img src="https://i.loli.net/2021/10/22/91RXecYS4vTDPny.jpg" align="center" width="800" height="250" div>
<span id="more"></span>
<table>
<tr><td bgcolor="CFCFCF"><p>基础知识：</p>
<p>Markdown 通过简单标记语法，使普通文本内容具有一定格式。但它本身不支持修改字体、字号与颜色等功能的。CSDN-markdown 编辑器是其衍生版本，支持基于 PageDown ( Stack Overflow）所使用的编辑器的扩展功能（如表格、脚注、内嵌HTML、内嵌 LaTeX 等等）。</p>
<p>Size：规定文本的尺寸大小，取值从 1 到 7 ，浏览器默认值是 3.</p>
</td></tr></table>


<h2 id="一、添加照片的两种方法，第二种可改变图片大小及位置"><a href="#一、添加照片的两种方法，第二种可改变图片大小及位置" class="headerlink" title="一、添加照片的两种方法，第二种可改变图片大小及位置"></a>一、添加照片的两种方法，第二种可改变图片大小及位置</h2><p><font color="red">注：你可以上传到图床的…图床访问速度比GithubPage更快，不用担心文章加载出来了但图片迟迟没有加载出的情况。国内比较稳定的图床几个有sm.ms，imgchr等</font></p>
<h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![XXX](XXX.jpg)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/18/w2gJc1UvHZnpyXF.jpg" alt="home-bg.jpg"></p>
<h3 id="第二种（可改变大小及显示位置）："><a href="#第二种（可改变大小及显示位置）：" class="headerlink" title="第二种（可改变大小及显示位置）："></a>第二种（可改变大小及显示位置）：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;XXX/XXX.jpg&quot; width = &quot;670&quot; height = &quot;300&quot; div align=right /&gt;</span><br></pre></td></tr></table></figure>


<img src="https://i.loli.net/2021/10/18/w2gJc1UvHZnpyXF.jpg" align="center" width="500" height="300" div>

<h2 id="二、更改字体、大小、颜色"><a href="#二、更改字体、大小、颜色" class="headerlink" title="二、更改字体、大小、颜色"></a>二、更改字体、大小、颜色</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=red&gt;我是红色&lt;/font&gt;</span><br><span class="line">&lt;font color=#008000&gt;我是绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=Blue&gt;我是蓝色&lt;/font&gt;</span><br><span class="line">&lt;font size=5&gt;我是尺寸&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot; color=green size=5&gt;我是黑体，绿色，尺寸为5&lt;/font&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font color="red" size="5">效果如下： </font></p>
<p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font></p>
<h2 id="三、为文字添加背景色"><a href="#三、为文字添加背景色" class="headerlink" title="三、为文字添加背景色"></a>三、为文字添加背景色</h2><p> 由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;背景色yellow&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p> <font color="red" size="5">效果如下： </font></p>
  <table><tr><td bgcolor="yellow">背景色yellow</td></tr></table>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
